#!/usr/bin/env python3
"""
üöÄ SCRIPT DE INICIO DE APLICACI√ìN
Ejecuta migraci√≥n de base de datos y luego inicia la aplicaci√≥n
"""

import os
import sys
import subprocess
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

def run_migration():
    """Ejecuta la migraci√≥n de base de datos"""
    
    logger.info("üîÑ Ejecutando migraci√≥n de base de datos...")
    
    try:
        # Ejecutar migraci√≥n
        result = subprocess.run([
            sys.executable, 'migrate_database.py'
        ], capture_output=True, text=True, timeout=60)
        
        if result.returncode == 0:
            logger.info("‚úÖ Migraci√≥n completada exitosamente")
            logger.info(result.stdout)
            return True
        else:
            logger.error("‚ùå Error en migraci√≥n:")
            logger.error(result.stderr)
            logger.warning("‚ö†Ô∏è Continuando con SQLite como fallback...")
            return True  # Continuar aunque falle (usar√° SQLite)
            
    except subprocess.TimeoutExpired:
        logger.error("‚è∞ Timeout en migraci√≥n - continuando con SQLite")
        return True
    except Exception as e:
        logger.error(f"‚ùå Error ejecutando migraci√≥n: {e}")
        logger.warning("‚ö†Ô∏è Continuando con SQLite como fallback...")
        return True

def start_streamlit():
    """Inicia la aplicaci√≥n Streamlit"""
    
    logger.info("üöÄ Iniciando aplicaci√≥n Streamlit...")
    
    # Configurar puerto
    port = os.getenv('PORT', '8080')
    
    # Comando para iniciar Streamlit
    cmd = [
        sys.executable, '-m', 'streamlit', 'run', 'bot_testing_app.py',
        '--server.port', port,
        '--server.address', '0.0.0.0',
        '--server.headless', 'true',
        '--server.runOnSave', 'false'
    ]
    
    logger.info(f"üì° Iniciando en puerto {port}")
    
    try:
        # Ejecutar Streamlit
        subprocess.run(cmd, check=True)
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå Error iniciando Streamlit: {e}")
        sys.exit(1)
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Aplicaci√≥n detenida por el usuario")
        sys.exit(0)

def main():
    """Funci√≥n principal"""
    
    logger.info("üèÅ Iniciando proceso de arranque...")
    
    # Paso 1: Migraci√≥n de base de datos
    if not run_migration():
        logger.error("‚ùå Migraci√≥n cr√≠tica fall√≥ - abortando inicio")
        sys.exit(1)
    
    # Paso 2: Iniciar aplicaci√≥n
    start_streamlit()

if __name__ == "__main__":
    main() 