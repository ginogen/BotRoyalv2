#!/usr/bin/env python3
"""
üîÑ MIGRACI√ìN AUTOM√ÅTICA DE BASE DE DATOS
Script que se ejecuta autom√°ticamente en deploy para asegurar que las tablas est√©n correctas
"""

import os
import sys
import psycopg2
from psycopg2.extras import RealDictCursor
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

def check_database_schema():
    """Verifica si el esquema de la base de datos es correcto"""
    
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        logger.info("‚ùå No hay DATABASE_URL configurada, usando SQLite")
        return True  # SQLite se crea autom√°ticamente
    
    try:
        logger.info("üîç Verificando esquema de PostgreSQL...")
        conn = psycopg2.connect(database_url)
        conn.autocommit = True
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        # Verificar si existe la tabla conversations con la columna rating
        cursor.execute("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'conversations' 
            AND column_name = 'rating'
            AND table_schema = 'public'
        """)
        
        rating_column = cursor.fetchone()
        
        if rating_column:
            logger.info("‚úÖ Esquema correcto - columna 'rating' encontrada")
            cursor.close()
            conn.close()
            return True
        else:
            logger.info("‚ö†Ô∏è Esquema incorrecto - falta columna 'rating'")
            cursor.close()
            conn.close()
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Error verificando esquema: {e}")
        return False

def migrate_database():
    """Migra la base de datos al esquema correcto"""
    
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        logger.info("‚ÑπÔ∏è Sin DATABASE_URL, no hay migraci√≥n necesaria")
        return True
    
    try:
        logger.info("üîß Iniciando migraci√≥n de base de datos...")
        conn = psycopg2.connect(database_url)
        conn.autocommit = True
        cursor = conn.cursor()
        
        # Backup de datos existentes (si los hay)
        logger.info("üíæ Respaldando datos existentes...")
        
                 # Verificar si hay datos en conversations
        try:
            cursor.execute("SELECT COUNT(*) FROM conversations")
            result = cursor.fetchone()
            conversation_count = result[0] if result else 0
            logger.info(f"üìä {conversation_count} conversaciones encontradas")
        except:
            conversation_count = 0
        
        # Verificar si hay datos en feedback
        try:
            cursor.execute("SELECT COUNT(*) FROM feedback")
            result = cursor.fetchone()
            feedback_count = result[0] if result else 0
            logger.info(f"üìä {feedback_count} feedbacks encontrados")
        except:
            feedback_count = 0
        
        # Si hay datos, crear tabla temporal para backup
        if conversation_count > 0 or feedback_count > 0:
            logger.info("üíæ Creando backup temporal de datos...")
            try:
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS conversations_backup AS 
                    SELECT * FROM conversations
                """)
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS feedback_backup AS 
                    SELECT * FROM feedback
                """)
                logger.info("‚úÖ Backup creado")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è No se pudo crear backup: {e}")
        
        # Eliminar tablas actuales
        logger.info("üóëÔ∏è Eliminando tablas obsoletas...")
        cursor.execute('DROP TABLE IF EXISTS conversations CASCADE')
        cursor.execute('DROP TABLE IF EXISTS feedback CASCADE')
        cursor.execute('DROP TABLE IF EXISTS bot_metrics CASCADE')
        
        # Crear tablas nuevas con esquema correcto
        logger.info("üèóÔ∏è Creando tablas con esquema correcto...")
        
        # Tabla conversations (unificada)
        cursor.execute('''
            CREATE TABLE conversations (
                id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                user_id VARCHAR(255) NOT NULL,
                message TEXT NOT NULL,
                bot_response TEXT NOT NULL,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                session_id VARCHAR(255) NOT NULL,
                rating INTEGER CHECK (rating >= 1 AND rating <= 5),
                feedback_text TEXT,
                category VARCHAR(100),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # Tabla general_feedback 
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS general_feedback (
                id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                user_id VARCHAR(255) NOT NULL,
                feedback_type VARCHAR(100) NOT NULL,
                title VARCHAR(255) NOT NULL,
                description TEXT NOT NULL,
                priority VARCHAR(50) NOT NULL,
                status VARCHAR(50) DEFAULT 'pendiente',
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                session_id VARCHAR(255) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # Crear √≠ndices
        cursor.execute('CREATE INDEX idx_conversations_user_timestamp ON conversations(user_id, timestamp)')
        cursor.execute('CREATE INDEX idx_conversations_rating ON conversations(rating)')
        cursor.execute('CREATE INDEX idx_feedback_priority ON general_feedback(priority, status)')
        
        logger.info("‚úÖ Tablas creadas exitosamente")
        
        # Migrar datos si hab√≠a backup
        if conversation_count > 0:
            logger.info("üì¶ Migrando datos de backup...")
            try:
                # Migrar conversaciones (mapear campos)
                cursor.execute("""
                    INSERT INTO conversations (user_id, message, bot_response, timestamp, session_id)
                    SELECT 
                        user_id,
                        COALESCE(conversation_data, 'Conversaci√≥n migrada') as message,
                        'Respuesta migrada' as bot_response,
                        timestamp,
                        'migrated_' || id::text as session_id
                    FROM conversations_backup
                """)
                
                # Migrar feedback a las conversaciones
                cursor.execute("""
                    UPDATE conversations 
                    SET rating = fb.rating, 
                        feedback_text = fb.comment,
                        category = fb.category
                    FROM feedback_backup fb
                    WHERE conversations.user_id = fb.user_id
                    AND conversations.session_id = 'migrated_' || fb.conversation_id::text
                """)
                
                logger.info("‚úÖ Datos migrados exitosamente")
                
                # Limpiar backups
                cursor.execute('DROP TABLE IF EXISTS conversations_backup')
                cursor.execute('DROP TABLE IF EXISTS feedback_backup')
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Error migrando datos: {e}")
                logger.info("üí° Se crearon las tablas vac√≠as - esto no afecta el funcionamiento")
        
        cursor.close()
        conn.close()
        
        logger.info("üéâ ¬°Migraci√≥n completada exitosamente!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error en migraci√≥n: {e}")
        return False

def main():
    """Funci√≥n principal de migraci√≥n"""
    
    logger.info("üöÄ Iniciando verificaci√≥n de base de datos...")
    
    # Verificar si necesita migraci√≥n
    if check_database_schema():
        logger.info("‚úÖ Base de datos ya est√° correcta")
        return True
    
    # Ejecutar migraci√≥n
    logger.info("üîß Base de datos necesita migraci√≥n...")
    success = migrate_database()
    
    if success:
        logger.info("üéâ ¬°Migraci√≥n completada! La aplicaci√≥n puede iniciarse")
        return True
    else:
        logger.error("‚ùå Migraci√≥n fall√≥ - la aplicaci√≥n usar√° SQLite como fallback")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 