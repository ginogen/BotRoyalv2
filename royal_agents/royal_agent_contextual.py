# Royal Agent Contextual para Royal Bot v2
# Agente principal que usa el sistema de contexto de OpenAI Agents

from typing import Dict, List, Any, Optional
from agents import Agent, Runner, RunContextWrapper  # type: ignore
from .conversation_context import RoyalAgentContext, context_manager
from .contextual_tools import create_contextual_tools
from .woocommerce_mcp_tools import create_woocommerce_tools
from .training_mcp_tools import create_training_tools
from .royal_agent import (
    get_royal_info, 
    track_client_greeting, 
    get_arreglos_info,
    get_joyas_personalizadas_info, 
    get_royal_education_info,
    get_combos_emprendedores_info,
    get_investment_guidance,
    get_sales_support_process,
    get_company_info_by_topic
)
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

def create_contextual_royal_agent() -> Agent[RoyalAgentContext]:
    """
    Crea el agente Royal con capacidades de contexto completas.
    Sigue el patr√≥n oficial de OpenAI Agents SDK.
    """
    
    # Instructions base que se complementan con contexto din√°mico
    base_instructions = """
    # IDENTIDAD Y PERSONALIDAD
    
    Sos Royalia, el primer punto de contacto de Royal Mayorista.
    
    ## Personalidad Argentina
    - Habl√° en tono argentino informal y amigable, pero sin exagerar ya que estas hablando con posibles clientes.
    - Evit√° ser formal o neutro (Debes vosear, no hablar en "usted")
    - Us√° emojis para remarcar algo importante y que tenga sentido en la respuesta(sin abusar)
    
    ## PALABRAS PROHIBIDAS - NUNCA USAR:
    aqu√≠, puedes, quieres, tienes, debes, ser√≠a bueno que, ¬øDeseas...?, ¬øPuedes...?, 
    Estoy aqu√≠ para ayudarte, muy bien, est√° bien, te ayudar√©, te recomiendo que, 
    s√≠gueme, haz clic, t√∫, tu, enviar√©, proporciona, cont√°ctame, 
    estar√© encantado de ayudarte, espero que tengas un buen d√≠a
    
    ## ALTERNATIVAS AL "CHE" (muy coloquial):
    En vez de "Che" (que suena poco profesional), us√° estas alternativas:
    ‚Ä¢ "Me encanta que‚Ä¶" ‚Üí Me encanta que est√©s pensando en invertir‚Ä¶
    ‚Ä¢ "Qu√© bueno que‚Ä¶" ‚Üí Qu√© bueno que est√©s evaluando la inversi√≥n‚Ä¶
    ‚Ä¢ "Genial que‚Ä¶" ‚Üí Genial que ya est√©s con ganas de dar este paso‚Ä¶
    ‚Ä¢ "Me alegra que‚Ä¶" ‚Üí Me alegra que est√©s considerando arrancar‚Ä¶
    ‚Ä¢ "Es buen√≠simo que‚Ä¶" ‚Üí Es buen√≠simo que quieras emprender‚Ä¶
    
    REGLA: Mantener tono argentino amigable pero profesional, evitando excesos coloquiales

    # üö® PROTOCOLO CR√çTICO DE FRUSTRACI√ìN Y HITL üö®
    
    **REGLA OBLIGATORIA #1: DETECTAR FRUSTRACI√ìN AUTOM√ÅTICAMENTE**
    
    Antes de CUALQUIER respuesta, SIEMPRE usar detect_user_frustration() para evaluar el estado del usuario.
    
    **Si se detecta frustraci√≥n (nivel 2 o 3):**
    1. **INMEDIATAMENTE dejar de insistir con compras/datos**
    2. **ACTIVAR protocolo HITL**
    3. **NO seguir pidiendo nombre, direcci√≥n, m√©todo de pago**
    4. **Usar handle_missing_information_hitl() o escalate_to_human_support()**
    5. **Cambiar completamente el enfoque a resolver su molestia**
    

    **NUNCA HACER cuando el usuario est√° frustrado:**
    - Seguir pidiendo datos de compra
    - Insistir con el mismo producto
    - Seguir ofreciendo combos sin resolver la molestia
    - Actuar como si nada pas√≥

    **REGLA OBLIGATORIA #2: TRIGGERS AUTOM√ÅTICOS PARA HERRAMIENTAS**
    
    ### Para consultas de WEB/CAT√ÅLOGO:
    **Palabras:** "web", "p√°gina", "website", "cat√°logo", "catalogo", "ver productos", "tienda online"
    ‚Üí **ACCI√ìN:** SIEMPRE usar get_basic_company_info("catalogo")
    
    ### Para informaci√≥n b√°sica:
    **Palabras:** "m√≠nimo", "minimo", "env√≠o", "envio", "pago", "confiable", "local"
    ‚Üí **ACCI√ìN:** SIEMPRE usar get_basic_company_info() con el tipo correspondiente
    
    ### Para productos espec√≠ficos con frustraci√≥n:
    **Si usuario dice "no me gusta" o "no me convence" despu√©s de mostrar productos:**
    ‚Üí **ACCI√ìN:** 
    1. USAR detect_user_frustration()
    2. Si detecta frustraci√≥n ‚Üí ACTIVAR HITL, NO seguir con compra
    3. PREGUNTAR qu√© espec√≠ficamente busca
    4. Ofrecer alternativas diferentes
    
    ### Para emprendedores que reci√©n empiezan:
    **Palabras:** "empezar", "arrancar", "inicio", "primera vez", "no s√© qu√© elegir", "soy nueva"
    ‚Üí **ACCI√ìN:** SIEMPRE usar get_combos_emprendedores_info()
    ‚Üí **IMPORTANTE:** Esta informaci√≥n es clave para convertir emprendedores nuevos
    
    ### Para consultas sobre presupuesto e inversi√≥n:
    **Palabras:** "cu√°nto invertir", "presupuesto", "cu√°nto comprar", "cu√°nto necesito", "cu√°nto gastar", "cu√°nto destinar", "primera inversi√≥n"
    ‚Üí **ACCI√ìN:** SIEMPRE usar get_investment_guidance()
    ‚Üí **CR√çTICO:** Esta informaci√≥n convierte dudas en ventas
    
    ### Para acompa√±amiento y cierre:
    **Palabras:** "me ayud√°s", "no s√© cu√°l elegir", "qu√© me recomend√°s", "qu√© me conviene", "estoy motivada", "quiero arrancar ya"
    ‚Üí **ACCI√ìN:** Usar get_sales_support_process() cuando detectes inter√©s alto
    ‚Üí **OBJETIVO:** Convertir motivaci√≥n en acci√≥n inmediata
    
    ### üö® IMPORTANTE - Consultas sobre PEDIDOS/√ìRDENES:
    **Palabras:** "mi pedido", "mi orden", "estado de mi", "d√≥nde est√° mi", "cu√°ndo llega mi", "seguimiento"
    ‚Üí **ACCI√ìN:** NO usar herramientas del bot - El sistema autom√°ticamente DERIVA estas consultas al equipo de seguimiento
    ‚Üí **NUNCA:** Intentar consultar estado de pedidos con herramientas
    ‚Üí **IMPORTANTE:** Estas consultas se detectan autom√°ticamente y se asignan al equipo correspondiente

    # üß† CAPACIDADES DE MEMORIA Y CONTEXTO
    
    **IMPORTANTE: Ten√©s MEMORIA de toda la conversaci√≥n.**
    
    - Record√°s todos los productos que mostraste
    - Sab√©s si el usuario es emprendedor y su nivel de experiencia
    - Pod√©s interpretar referencias como "el primero", "el segundo", "el de plata"
    - Manten√©s el contexto de la conversaci√≥n para dar respuestas personalizadas

    # üö® PROTOCOLO HITL (HUMAN IN THE LOOP) - REGLA CR√çTICA üö®
    
    **NUNCA JAM√ÅS uses frases como:**
    - "No tengo esa informaci√≥n"
    - "No s√© sobre eso"
    - "No tengo acceso a eso"
    - "Parece que no puedo ayudarte con eso"
    - "Esa informaci√≥n no est√° disponible"
    - "Lamentablemente no tengo informaci√≥n"
    - "Lamentablemente no..."
    - "Disculp√°, no tengo..."
    - "Lo siento, no..."
    - Cualquier frase que empiece con "Lamentablemente", "Disculp√°", "Lo siento"
    
    **EN SU LUGAR, SIEMPRE usa frases como:**
    - "Dale, dejame que chequeo eso puntualmente y te confirmo ahora"
    - "Tengo que verificar eso con el equipo. Dame un toque"
    - "Eso lo tengo que consultar espec√≠ficamente. En un ratito te confirmo"
    - "Los datos me los est√°n actualizando. Ya te traigo la info completa"
    
    ## üîß HERRAMIENTAS HITL DISPONIBLES:
    
    ### Para detectar problemas:
    - `detect_user_frustration()` ‚Üí **USAR EN CADA RESPUESTA** para detectar si el usuario est√° enojado/frustrado
    - `check_mcp_connectivity_and_fallback()` ‚Üí Verifica sistemas y activa HITL si hay problemas
    
    ### Para manejar informaci√≥n faltante:
    - `handle_missing_information_hitl()` ‚Üí Genera respuestas profesionales cuando falta info
    
    ## üö® REGLA CR√çTICA PARA PRODUCTOS NO ENCONTRADOS:
    
    **Cuando el usuario pregunte por un producto que no encontr√°s (ej: esmaltes, perfumes, etc):**
    
    1. **NUNCA digas que no ten√©s informaci√≥n**
    2. **SIEMPRE intent√° buscar con `get_product_info()` primero**
    3. **Si no encontr√°s resultados, INMEDIATAMENTE us√° `handle_missing_information_hitl()`**
    4. **NUNCA inventes informaci√≥n o productos**
    
    **Ejemplo correcto:**
    Usuario: "Tienen esmaltes?"
    1. Usar `get_product_info(product_name="esmalte")`
    2. Si no hay resultados, usar `handle_missing_information_hitl(information_type="product", context_description="usuario pregunta por esmaltes")`
    3. Responder con el mensaje natural que devuelve HITL
    - `escalate_to_human_support()` ‚Üí Escala a soporte humano cuando es necesario
    
    **PROTOCOLO AUTOM√ÅTICO:**
    1. **SIEMPRE** empezar con detect_user_frustration() 
    2. Si detect√°s frustraci√≥n ‚Üí **CAMBIAR ENFOQUE**, usar HITL, NO insistir con compra
    3. Si no ten√©s informaci√≥n ‚Üí Usar respuestas HITL naturales
    4. Si hay problemas t√©cnicos ‚Üí Actuar como que verific√°s en tiempo real
    5. Si es muy complejo ‚Üí Escalar con escalate_to_human_support()

    ## üîß HERRAMIENTAS DE CONTEXTO DISPONIBLES:
    
    ### Para acceder al contexto:
    - `get_context_summary()` ‚Üí Ver resumen completo del contexto actual
    - `update_user_profile()` ‚Üí Guardar informaci√≥n del usuario
    - `get_recommendations_with_context()` ‚Üí Recomendaciones personalizadas
    
    ### Para productos con memoria:
    - `get_product_info_with_context()` ‚Üí Buscar productos Y guardarlos en memoria
    - `get_combos_with_context()` ‚Üí Obtener combos Y guardarlos para referencias ("combo 1", "el segundo")
    - `process_purchase_intent()` ‚Üí Procesar intenci√≥n de compra con contexto
    
    ### Para limpiar:
    - `clear_conversation_context()` ‚Üí Reiniciar conversaci√≥n
    
    # ‚ö†Ô∏è REGLAS CR√çTICAS CON CONTEXTO Y HITL
    
    ## 1. PROTOCOLO PARA EMPRENDEDORES:
    
    **SI detect√°s que el usuario es emprendedor (por contexto o menciona emprender):**
    
    1. **USAR get_context_summary()** para ver su perfil actual
    2. **APLICAR protocolo seg√∫n su experiencia:**
       - **Empezando/Primera vez**: USAR get_combos_emprendedores_info() inmediatamente
       - **Experimentado**: productos espec√≠ficos + diversificaci√≥n
    3. **GUARDAR informaci√≥n con update_user_profile()**
    4. **REGLA CR√çTICA:** Si mencionan "no s√© qu√© elegir" o "empezar" ‚Üí combos emprendedores OBLIGATORIO
    5. **REGLA CR√çTICA:** Si preguntan por dinero/presupuesto ‚Üí get_investment_guidance() OBLIGATORIO
    6. **REGLA DE CONVERSI√ìN:** SIEMPRE incluir CTAs claras cuando muestres productos o combos
    7. **REGLA ANTI-OBJECI√ìN:** Romper objeciones de precio explicando ROI y rentabilidad
    8. **REGLA DE URGENCIA:** Mencionar que combos se agotan o son limitados (sin mentir)
    
    ## 2. PROTOCOLO PARA PRODUCTOS ESPEC√çFICOS:
    
    **CUANDO el usuario pregunta por productos:**
    
    1. **USAR get_context_summary()** para ver productos previos
    2. **Si pregunta por COMBOS** ‚Üí usar get_combos_with_context() (guarda autom√°ticamente para referencias)
    3. **Si es consulta vaga** ‚Üí hacer preguntas espec√≠ficas ANTES de buscar
    4. **Si es consulta espec√≠fica** ‚Üí usar get_product_info_with_context()
    5. **SIEMPRE guardar productos en contexto** para referencias futuras
    6. **Si hay errores MCP** ‚Üí Las herramientas autom√°ticamente activan HITL
    
    ## 3. PROTOCOLO PARA INTENCIONES DE COMPRA:
    
    **CUANDO el usuario dice "quiero el segundo", "me interesa el vintage", etc.:**
    
    1. **USAR detect_user_frustration() PRIMERO** ‚Üí Si est√° frustrado, NO proceder con compra
    2. **Si NO est√° frustrado** ‚Üí USAR process_purchase_intent() 
    3. **Interpretar la referencia** usando el contexto de productos mostrados
    4. **Proceder con datos de compra** solo si el usuario est√° contento
    
    ## 4. PROTOCOLO PARA FRUSTRACI√ìN/PROBLEMAS:
    
    **SI el usuario est√° frustrado, enojado o hay problemas t√©cnicos:**
    
    1. **DETECTAR autom√°ticamente** con `detect_user_frustration()`
    2. **NUNCA decir "no tengo acceso" o "no s√©"**
    3. **NUNCA insistir con datos de compra si est√° molesto**
    4. **SIEMPRE usar frases HITL** como "dame un momento que chequeo eso"
    5. **ESCALAR si es necesario** con `escalate_to_human_support()`
    6. **CAMBIAR completamente el enfoque** a resolver su molestia

    ## 5. PROTOCOLO PARA WEB/CAT√ÅLOGO:
    
    **CUANDO el usuario pregunta por "web", "p√°gina", "cat√°logo", "tienda online":**
    
    1. **SIEMPRE usar get_basic_company_info("catalogo")**
    2. **NUNCA inventar links**
    3. **Usar SOLO el link oficial:** https://royalmayorista.com.ar/shop/
    4. **Explicar qu√© van a encontrar en la web**
    
    # INFORMACI√ìN CLAVE DE ROYAL
    
    ## ¬øQu√© es Royal?
    Royal Company, fundada en 2016 y operativa desde 2017, es una empresa mayorista en Argentina 
    que apoya a emprendedores con productos de moda y belleza.
    
    ## Ubicaci√≥n (C√≥rdoba Capital):
    - Royal Joyas: 9 de Julio 472
    - Royal Joyas: General Paz 159, Galer√≠a Planeta, Local 18  
    - Royal Bijou: San Mart√≠n 48, Galer√≠a San Mart√≠n, Local 23A
    
    ## Tipos de Compra:
    ### Mayorista (Revendedores):
    - M√≠nimo: $40,000
    - Precios especiales, margen hasta 150%
    
    ### Minorista:
    - Sin m√≠nimo de compra, precios regulares
    
    ## Env√≠os:
    - Andreani (100% asegurado)
    - C√≥rdoba Capital: $4,999, Resto del pa√≠s: $7,499  
    - GRATIS en pedidos +$80,000
    
    ## Pagos:
    - Tarjeta (hasta 3 cuotas sin inter√©s)
    - Transferencia: CBU 4530000800014232361716, Alias: ROYAL.JOYAS.2023.nx
    - Efectivo en locales, Sistema de se√±a: $10,000
    
    # üéØ EJEMPLOS DE USO DEL CONTEXTO Y HITL:
    
    **Ejemplo 1 - Usuario emprendedor:**
    ```
    Usuario: "Quiero empezar a vender"
    
    1. Usar detect_user_frustration() ‚Üí confirmar que est√° bien
    2. Usar get_context_summary() ‚Üí ver si ya sabemos algo
    3. Usar update_user_profile("experience_level", "empezando")
    4. Hacer preguntas seg√∫n protocolo emprendedor
    5. Usar get_recommendations_with_context() para sugerir combos
    ```
    
    **Ejemplo 2 - Referencia a producto:**
    ```
    Usuario: "Quiero el segundo reloj"
    
    1. Usar detect_user_frustration() ‚Üí verificar estado de √°nimo
    2. Si est√° bien ‚Üí usar process_purchase_intent("quiero el segundo reloj")
    3. El sistema autom√°ticamente encuentra el producto del contexto
    4. Proceder con proceso de compra
    ```
    
    **Ejemplo 3 - Usuario frustrado:**
    ```
    Usuario: "Esto no me gusta, son un desastre"
    
    1. detect_user_frustration() detecta frustraci√≥n nivel 3
    2. **INMEDIATAMENTE cambiar enfoque**
    3. **NO insistir con datos de compra**
    4. Responder: "Perd√≥n que no te convencieron. ¬øQu√© espec√≠ficamente est√°s buscando?"
    5. Escalar si es necesario
    ```
    
    **Ejemplo 4 - Pregunta por web:**
    ```
    Usuario: "¬øTienen p√°gina web para ver el cat√°logo?"
    
    1. **SIEMPRE usar get_basic_company_info("catalogo")**
    2. Responder con link oficial: https://royalmayorista.com.ar/shop/
    3. **NUNCA inventar links**
    ```
    
    **Ejemplo 5 - Pregunta por presupuesto:**
    ```
    Usuario: "¬øCu√°nto necesito invertir para empezar?"
    
    1. **SIEMPRE usar get_investment_guidance()**
    2. La herramienta da informaci√≥n espec√≠fica sobre montos ($40,000-$150,000)
    3. **NUNCA inventar montos o rangos** - usar solo la informaci√≥n de la herramienta
    4. Continuar la conversaci√≥n preguntando por el rubro de inter√©s
    ```
    
    # REGLAS DE COMPORTAMIENTO CR√çTICAS
    
    1. **SIEMPRE detectar frustraci√≥n PRIMERO** antes de cualquier acci√≥n
    2. **NUNCA inventar informaci√≥n** - usar datos reales del contexto
    3. **INTERPRETAR referencias** usando el contexto de productos mostrados
    4. **PERSONALIZAR respuestas** seg√∫n el perfil del usuario en contexto
    5. **MANTENER tono argentino** - informal, cercano, amigable SIEMPRE
    6. **PROTOCOLO HITL OBLIGATORIO** - nunca decir "no tengo informaci√≥n"
    7. **CAMBIAR ENFOQUE si detecta frustraci√≥n** - NO insistir con compra
    8. **USAR LINKS REALES** - solo https://royalmayorista.com.ar/shop/ para cat√°logo
    
    **REGLA DE ORO**: El contexto es tu memoria, HITL es tu salvavidas, y la detecci√≥n de frustraci√≥n es tu br√∫jula. Cuando detectes frustraci√≥n, CAMBI√Å completamente el enfoque para resolver la molestia, no para vender.
    """
    
    # Preparar todas las herramientas
    base_tools = [
        get_royal_info,
        track_client_greeting,
        get_arreglos_info,
        get_joyas_personalizadas_info,
        get_royal_education_info,
        get_combos_emprendedores_info,
        get_investment_guidance,
        get_sales_support_process,
        get_company_info_by_topic
    ]
    
    # Agregar herramientas contextuales (OBLIGATORIAS)
    contextual_tools = create_contextual_tools()
    all_tools = base_tools + contextual_tools
    
    # Agregar herramientas MCP si est√°n disponibles
    try:
        woocommerce_tools = create_woocommerce_tools()
        all_tools.extend(woocommerce_tools)
        logger.info("‚úÖ WooCommerce tools agregadas")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è WooCommerce tools no disponibles: {e}")
    
    try:
        training_tools = create_training_tools()
        all_tools.extend(training_tools)
        logger.info("‚úÖ Training tools agregadas")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Training tools no disponibles: {e}")
    
    # Crear el agente con tipo de contexto espec√≠fico
    # Suprimiendo errores de tipo ya que la API funciona correctamente en runtime
    royal_agent = Agent[RoyalAgentContext](  # type: ignore
        name="Royalia - Royal Contextual",
        instructions=base_instructions,
        model="gpt-4o-mini",
        tools=all_tools  # type: ignore
    )
    
    logger.info(f"‚úÖ Agente Royal Contextual creado con {len(all_tools)} herramientas")
    return royal_agent

def get_dynamic_instructions(context: RoyalAgentContext) -> str:
    """
    Genera instrucciones din√°micas basadas en el contexto actual.
    Esto se puede agregar al input de Runner.run()
    """
    
    enhanced_instructions = context.get_enhanced_instructions()
    
    if enhanced_instructions:
        return f"""
CONTEXTO DIN√ÅMICO PARA ESTA CONVERSACI√ìN:

{enhanced_instructions}

---
RESPONDE al usuario considerando este contexto espec√≠fico.
"""
    
    return ""

async def run_contextual_conversation(user_id: str, user_message: str) -> str:
    """
    Ejecuta una conversaci√≥n usando el agente contextual.
    Esta funci√≥n maneja todo el flujo de contexto autom√°ticamente.
    """
    
    logger.info(f"üó£Ô∏è CONVERSACI√ìN CONTEXTUAL iniciada para: {user_id}")
    logger.info(f"   Mensaje: {user_message}")
    
    try:
        # Obtener o crear contexto
        context = context_manager.get_or_create_context(user_id)
        
        # Usuario interaction tracking
        logger.info(f"üìù Usuario {user_id} iniciando conversaci√≥n contextual")
        
        # Registrar mensaje del usuario
        context.conversation.add_interaction("user", user_message)
        
        # Generar instrucciones din√°micas
        dynamic_instructions = get_dynamic_instructions(context)
        
        # Preparar input completo
        full_input = user_message
        if dynamic_instructions:
            full_input = dynamic_instructions + "\n\nUsuario dice: " + user_message
        
        # Crear agente
        agent = create_contextual_royal_agent()
        
        # Ejecutar conversaci√≥n con contexto
        result = await Runner.run(
            starting_agent=agent,
            input=full_input,
            context=context
        )
        
        # Registrar respuesta
        context.conversation.add_interaction("assistant", result.final_output)
        
        # Update user context profile
        logger.info(f"üìä Contexto actualizado para usuario: {user_id}")
        
        logger.info(f"‚úÖ Conversaci√≥n completada para: {user_id}")
        logger.info(f"   Respuesta length: {len(result.final_output)}")
        
        return result.final_output
        
    except Exception as e:
        logger.error(f"‚ùå Error en conversaci√≥n contextual: {str(e)}")
        return f"Hubo un problema procesando tu mensaje. Por favor, intenta de nuevo."

# Funci√≥n de conveniencia para usar sincr√≥nicamente
def run_contextual_conversation_sync(user_id: str, user_message: str) -> str:
    """Versi√≥n sincr√≥nica de run_contextual_conversation usando thread pool"""
    
    import asyncio
    import threading
    from concurrent.futures import ThreadPoolExecutor
    
    try:
        # Obtener contexto
        context = context_manager.get_or_create_context(user_id)
        
        # Usuario interaction tracking
        logger.info(f"üìù Usuario {user_id} iniciando conversaci√≥n contextual sync")
        
        # Registrar mensaje
        context.conversation.add_interaction("user", user_message)
        
        # Instrucciones din√°micas
        dynamic_instructions = get_dynamic_instructions(context)
        
        # Input completo
        full_input = user_message
        if dynamic_instructions:
            full_input = dynamic_instructions + "\n\nUsuario dice: " + user_message
        
        # Crear agente
        agent = create_contextual_royal_agent()
        
        # Funci√≥n para ejecutar en un nuevo event loop
        def run_in_new_loop():
            try:
                # Crear un nuevo event loop para este thread
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                # Ejecutar la conversaci√≥n as√≠ncrona
                async def async_conversation():
                    result = await Runner.run(
                        starting_agent=agent,
                        input=full_input,
                        context=context
                    )
                    return result.final_output
                
                return loop.run_until_complete(async_conversation())
            finally:
                loop.close()
        
        # Ejecutar en thread pool para evitar bloquear
        with ThreadPoolExecutor(max_workers=1) as executor:
            future = executor.submit(run_in_new_loop)
            result = future.result(timeout=30)  # 30 segundos timeout
        
        # Registrar respuesta
        context.conversation.add_interaction("assistant", result)
        
        # Update user context profile
        logger.info(f"üìä Contexto actualizado para usuario: {user_id}")
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Error en conversaci√≥n contextual sync: {str(e)}")
        return f"Hubo un problema procesando tu mensaje. Por favor, intenta de nuevo."

# Instancia global del agente
contextual_royal_agent = create_contextual_royal_agent()

# Funci√≥n helper para limpiar contextos antiguos
def cleanup_old_contexts():
    """Limpia contextos antiguos (llamar peri√≥dicamente)"""
    context_manager.cleanup_old_contexts(hours=24)
    logger.info("üßπ Limpieza de contextos antiguos completada")

# Funciones auxiliares para extraer informaci√≥n del contexto para el sistema de seguimiento
def _extract_user_type_from_context(context: RoyalAgentContext) -> str:
    """Extrae el tipo de usuario basado en el contexto de la conversaci√≥n"""
    try:
        conversation_text = context.conversation.get_context_summary_for_llm().lower()
        
        # Palabras clave para identificar tipo de usuario
        if any(word in conversation_text for word in ["emprender", "emprendedor", "emprendedora", "arrancar", "empezar"]):
            return "emprendedor"
        elif any(word in conversation_text for word in ["revender", "revendedor", "revendedora", "vender", "negocio"]):
            return "revendedor"
        elif any(word in conversation_text for word in ["comprar para mi", "para uso personal", "para m√≠"]):
            return "minorista"
        else:
            return "potencial_emprendedor"  # Default
            
    except Exception as e:
        logger.error(f"‚ùå Error extrayendo tipo de usuario: {e}")
        return "desconocido"

def _extract_interest_from_context(context: RoyalAgentContext) -> str:
    """Extrae el inter√©s principal del usuario basado en la conversaci√≥n"""
    try:
        conversation_text = context.conversation.get_context_summary_for_llm().lower()
        
        # Contar menciones por categor√≠a
        interests = {
            "joyas": ["joya", "anillo", "aros", "pulsera", "dije", "plata", "oro"],
            "maquillaje": ["maquillaje", "labial", "base", "sombra", "cosmetic", "belleza"],
            "indumentaria": ["ropa", "remera", "jean", "vestido", "indumentaria", "fashion"],
            "relojes": ["reloj", "casio", "hora"],
            "accesorios": ["accesorio", "bolso", "cartera", "bijouterie"]
        }
        
        # Contar menciones
        interest_scores = {}
        for category, keywords in interests.items():
            score = sum(1 for keyword in keywords if keyword in conversation_text)
            if score > 0:
                interest_scores[category] = score
        
        # Retornar el inter√©s con m√°s menciones
        if interest_scores:
            return max(interest_scores, key=interest_scores.get)
        else:
            return "general"
            
    except Exception as e:
        logger.error(f"‚ùå Error extrayendo inter√©s: {e}")
        return "general"

def _extract_experience_level_from_context(context: RoyalAgentContext) -> str:
    """Extrae el nivel de experiencia del usuario"""
    try:
        conversation_text = context.conversation.get_context_summary_for_llm().lower()
        
        # Palabras clave para novatos
        beginner_keywords = ["empezar", "arrancar", "primera vez", "no s√©", "nuevo", "nueva", "nunca", "como empiezo"]
        # Palabras clave para experimentados
        experienced_keywords = ["ya vendo", "experiencia", "hace tiempo", "conozco", "ya trabajo", "mi negocio"]
        
        beginner_score = sum(1 for keyword in beginner_keywords if keyword in conversation_text)
        experienced_score = sum(1 for keyword in experienced_keywords if keyword in conversation_text)
        
        if beginner_score > experienced_score:
            return "empezando"
        elif experienced_score > beginner_score:
            return "experimentado"
        else:
            return "intermedio"
            
    except Exception as e:
        logger.error(f"‚ùå Error extrayendo nivel de experiencia: {e}")
        return "desconocido"

# NUEVAS FUNCIONES DE EXTRACCI√ìN AVANZADA
def _extract_specific_products_from_context(context: RoyalAgentContext) -> List[str]:
    """Extrae productos espec√≠ficos mencionados en la conversaci√≥n"""
    try:
        conversation_text = context.conversation.get_context_summary_for_llm().lower()
        
        # Productos espec√≠ficos con patrones de reconocimiento
        specific_products = {
            # Joyas
            "anillos de plata 925": ["anillo de plata", "anillos plata 925", "anillos de plata"],
            "aros con cristales": ["aros cristal", "aros con cristal", "aros cristales"],
            "pulseras ajustables": ["pulsera ajustable", "pulseras que se ajustan"],
            "dijes personalizados": ["dije personalizado", "dijes con nombre"],
            "conjuntos de aros": ["conjunto de aros", "set de aros"],
            
            # Maquillaje
            "labiales de larga duraci√≥n": ["labial larga duraci√≥n", "labiales que duran"],
            "bases l√≠quidas": ["base l√≠quida", "bases fluidas"],
            "paletas de sombras": ["paleta de sombras", "paleta sombra"],
            "kits de maquillaje": ["kit maquillaje", "set de maquillaje"],
            
            # Indumentaria
            "remeras oversized": ["remera oversize", "remeras grandes"],
            "jeans de moda": ["jean de moda", "jeans trendy"],
            "vestidos casuales": ["vestido casual", "vestidos c√≥modos"],
            
            # Combos
            "combo emprendedor": ["combo emprendedora", "combo para emprender"],
            "combo joyas trendy": ["combo joya", "combo de joyas"],
            "combo todo en uno": ["combo completo", "combo total"]
        }
        
        mentioned_products = []
        for product_name, patterns in specific_products.items():
            if any(pattern in conversation_text for pattern in patterns):
                mentioned_products.append(product_name)
        
        # Agregar productos gen√©ricos si se mencionaron
        generic_products = {
            "anillos": ["anillo"],
            "aros": ["aros", "aro"],
            "pulseras": ["pulsera"],
            "labiales": ["labial"],
            "remeras": ["remera"],
            "relojes": ["reloj"]
        }
        
        for product_name, patterns in generic_products.items():
            if any(pattern in conversation_text for pattern in patterns):
                if not any(product_name in mp for mp in mentioned_products):
                    mentioned_products.append(product_name)
        
        return mentioned_products[:5]  # M√°ximo 5 productos
        
    except Exception as e:
        logger.error(f"‚ùå Error extrayendo productos espec√≠ficos: {e}")
        return []

def _extract_budget_from_context(context: RoyalAgentContext) -> Optional[str]:
    """Extrae presupuesto mencionado por el usuario"""
    try:
        conversation_text = context.conversation.get_context_summary_for_llm()
        
        import re
        
        # Patrones para capturar presupuestos
        budget_patterns = [
            r'\$\s*(\d{1,3}(?:\.\d{3})*(?:,\d{2})?)',  # $40.000 o $40,000
            r'(\d{1,3}(?:\.\d{3})*)\s*pesos',  # 40.000 pesos
            r'(\d{1,3}(?:\.\d{3})*)\s*mil',    # 40 mil
            r'presupuesto.*?(\d{1,3}(?:\.\d{3})*)',  # presupuesto de 40000
            r'invertir.*?(\d{1,3}(?:\.\d{3})*)',     # invertir 40000
            r'tengo.*?(\d{1,3}(?:\.\d{3})*)',        # tengo 40000
        ]
        
        for pattern in budget_patterns:
            matches = re.findall(pattern, conversation_text, re.IGNORECASE)
            if matches:
                # Tomar el n√∫mero m√°s alto (probablemente el presupuesto real)
                amounts = []
                for match in matches:
                    # Limpiar y convertir a n√∫mero
                    clean_amount = match.replace('.', '').replace(',', '')
                    try:
                        amounts.append(int(clean_amount))
                    except ValueError:
                        continue
                
                if amounts:
                    max_amount = max(amounts)
                    # Formatear bonito
                    if max_amount >= 1000:
                        return f"${max_amount:,}".replace(',', '.')
                    else:
                        return f"${max_amount}"
        
        return None
        
    except Exception as e:
        logger.error(f"‚ùå Error extrayendo presupuesto: {e}")
        return None

def _extract_objections_from_context(context: RoyalAgentContext) -> List[str]:
    """Extrae objeciones y dudas espec√≠ficas expresadas por el usuario"""
    try:
        conversation_text = context.conversation.get_context_summary_for_llm().lower()
        
        # Objeciones comunes con patrones
        objections_patterns = {
            "no s√© qu√© elegir": ["no s√© qu√©", "no se que", "no s√© cu√°l", "qu√© me recomend√°s", "qu√© me recomiendas"],
            "es mucha inversi√≥n": ["mucha plata", "mucho dinero", "muy caro", "mucha inversi√≥n", "no tengo tanto"],
            "no tengo experiencia": ["no tengo experiencia", "nunca vend√≠", "no s√© vender", "soy nueva en esto"],
            "no tengo tiempo": ["no tengo tiempo", "muy ocupada", "no puedo dedicar"],
            "no s√© si se vende": ["se vender√°", "si se vende", "tiene salida", "se mueve"],
            "tengo miedo de perder": ["miedo de perder", "y si no funciona", "riesgo", "p√©rdida"],
            "no s√© por d√≥nde empezar": ["por d√≥nde empiezo", "c√≥mo empiezo", "no s√© empezar", "primer paso"]
        }
        
        detected_objections = []
        for objection, patterns in objections_patterns.items():
            if any(pattern in conversation_text for pattern in patterns):
                detected_objections.append(objection)
        
        return detected_objections[:3]  # M√°ximo 3 objeciones principales
        
    except Exception as e:
        logger.error(f"‚ùå Error extrayendo objeciones: {e}")
        return []

def _extract_questions_asked_from_context(context: RoyalAgentContext) -> List[str]:
    """Extrae preguntas espec√≠ficas que hizo el usuario"""
    try:
        conversation_text = context.conversation.get_context_summary_for_llm().lower()
        
        # Preguntas frecuentes con patrones
        common_questions = {
            "cu√°nto necesito para empezar": ["cu√°nto necesito", "cu√°nto para empezar", "cu√°nto invertir", "inversi√≥n inicial"],
            "qu√© productos se venden m√°s": ["qu√© se vende m√°s", "qu√© productos van mejor", "cu√°les son los m√°s vendidos"],
            "cu√°nto gano por producto": ["cu√°nto gano", "qu√© margen", "rentabilidad", "ganancia por"],
            "c√≥mo funciona el env√≠o": ["env√≠o", "c√≥mo me llega", "shipping", "entrega"],
            "tienen local f√≠sico": ["local", "d√≥nde est√°n", "direcci√≥n", "showroom"],
            "cu√°nto tiempo demora": ["cu√°nto tarda", "tiempo de entrega", "demora"],
            "c√≥mo hago el pedido": ["c√≥mo compro", "c√≥mo pido", "proceso de compra"],
            "tienen garant√≠a": ["garant√≠a", "devoluci√≥n", "cambio"],
            "qu√© formas de pago": ["pago", "cuotas", "tarjeta", "transferencia"]
        }
        
        detected_questions = []
        for question, patterns in common_questions.items():
            if any(pattern in conversation_text for pattern in patterns):
                detected_questions.append(question)
        
        return detected_questions[:4]  # M√°ximo 4 preguntas principales
        
    except Exception as e:
        logger.error(f"‚ùå Error extrayendo preguntas: {e}")
        return []

def _extract_engagement_level_from_context(context: RoyalAgentContext) -> str:
    """Determina el nivel de engagement del usuario durante la conversaci√≥n"""
    try:
        # Obtener m√©tricas de la conversaci√≥n
        conversation_length = len(context.conversation.get_context_summary_for_llm())
        interaction_count = len(context.conversation.interaction_history)
        
        # Buscar indicadores de alto engagement
        conversation_text = context.conversation.get_context_summary_for_llm().lower()
        
        high_engagement_indicators = [
            "me interesa", "me gusta", "quiero saber", "contame m√°s", 
            "perfecto", "genial", "me encanta", "qu√© bueno",
            "s√≠", "dale", "ok", "entiendo"
        ]
        
        low_engagement_indicators = [
            "no me interesa", "despu√©s veo", "lo pienso", "no s√©",
            "tal vez", "capaz", "no estoy segura"
        ]
        
        high_score = sum(1 for indicator in high_engagement_indicators if indicator in conversation_text)
        low_score = sum(1 for indicator in low_engagement_indicators if indicator in conversation_text)
        
        # Determinar engagement basado en m√∫ltiples factores
        if conversation_length > 500 and interaction_count >= 3 and high_score > low_score:
            return "alto"
        elif conversation_length > 200 and high_score >= low_score:
            return "medio"
        else:
            return "bajo"
            
    except Exception as e:
        logger.error(f"‚ùå Error determinando engagement: {e}")
        return "medio"

def _extract_conversation_topics_from_context(context: RoyalAgentContext) -> List[str]:
    """Extrae los temas principales de conversaci√≥n"""
    try:
        conversation_text = context.conversation.get_context_summary_for_llm().lower()
        
        topics_patterns = {
            "combos emprendedores": ["combo emprendedor", "combo para empezar", "kit emprendedor"],
            "m√°rgenes de ganancia": ["margen", "ganancia", "rentabilidad", "cu√°nto gano"],
            "productos trendy": ["moda", "trendy", "tendencia", "lo que est√°"],
            "inversi√≥n inicial": ["inversi√≥n", "invertir", "presupuesto inicial", "cu√°nto necesito"],
            "experiencia en ventas": ["experiencia", "vend√≠", "vendo", "negocio", "clientas"],
            "env√≠os y log√≠stica": ["env√≠o", "entrega", "d√≥nde llega", "andreani"],
            "formas de pago": ["pago", "cuotas", "tarjeta", "transferencia", "efectivo"],
            "cat√°logo de productos": ["productos", "cat√°logo", "qu√© tienen", "variedad"]
        }
        
        detected_topics = []
        for topic, patterns in topics_patterns.items():
            if any(pattern in conversation_text for pattern in patterns):
                detected_topics.append(topic)
        
        return detected_topics[:4]  # M√°ximo 4 temas principales
        
    except Exception as e:
        logger.error(f"‚ùå Error extrayendo temas de conversaci√≥n: {e}")
        return [] 