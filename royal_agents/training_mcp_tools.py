# Training MCP Tools para Royal Bot v2
# Herramientas especializadas en contenido de entrenamiento

import os
import asyncio
from typing import Dict, List, Any, Optional
from agents import function_tool  # type: ignore
import logging

# Import the training parser
try:
    from .training_parser import training_parser, ConversationExample, TrainingRule, FAQ
    TRAINING_PARSER_AVAILABLE = True
    logger = logging.getLogger(__name__)
    logger.info("‚úÖ Training Parser importado correctamente")
except ImportError as e:
    TRAINING_PARSER_AVAILABLE = False
    logger = logging.getLogger(__name__)
    logger.error(f"‚ùå Error importando Training Parser: {str(e)}")

@function_tool
async def get_combo_recommendations(client_experience: str, client_context: str = "") -> str:
    """
    Obtiene recomendaciones de combos seg√∫n experiencia y contexto del cliente
    
    Args:
        client_experience: "empezando" | "experimentado" | "renovando_stock" | "indeciso"
        client_context: contexto adicional de la conversaci√≥n
    """
    
    logger.info(f"üéØ GET_COMBO_RECOMMENDATIONS llamada:")
    logger.info(f"   client_experience: '{client_experience}'")
    logger.info(f"   client_context: '{client_context}'")
    
    if not TRAINING_PARSER_AVAILABLE:
        return "Sistema de entrenamiento no disponible. Consult√° nuestros combos en https://royalmayorista.com.ar/categoria-producto/combo-emprendedor/"
    
    try:
        # Mapear experiencia a escenarios
        scenario_map = {
            'empezando': 'cliente_indeciso',
            'indeciso': 'cliente_indeciso',
            'experimentado': 'cliente_experimentado',
            'renovando_stock': 'cliente_experimentado'
        }
        
        scenario = scenario_map.get(client_experience.lower(), 'cliente_indeciso')
        
        # Obtener ejemplo de conversaci√≥n relevante
        example = training_parser.get_conversation_example_by_scenario(scenario)
        
        # Obtener reglas espec√≠ficas para combos
        combo_rules = training_parser.get_rules_by_category('combos')
        critical_rules = [rule for rule in combo_rules if rule.rule_type == "CRITICO"]
        
        # Obtener beneficios de combos
        benefits = training_parser.get_combo_benefits()
        combo_types = training_parser.get_combo_types()
        
        # Construir respuesta personalizada
        response = f"üéØ **Recomendaci√≥n de Combos para Cliente {client_experience.title()}**\n\n"
        
        if example:
            response += f"üìù **Enfoque recomendado:**\n"
            response += f"Bas√°ndome en el entrenamiento, para un cliente que {client_experience}, "
            response += f"el enfoque debe ser:\n\n"
            response += f"*Ejemplo de respuesta ideal:*\n"
            response += f'"{example.royalia_response[:200]}..."\n\n'
        
        if critical_rules:
            response += f"‚ö†Ô∏è **Reglas Cr√≠ticas a Seguir:**\n"
            for rule in critical_rules[:3]:  # Top 3 reglas cr√≠ticas
                response += f"‚Ä¢ {rule.description}\n"
            response += "\n"
        
        if benefits:
            response += f"üíé **Beneficios Clave a Mencionar:**\n"
            for benefit in benefits[:4]:  # Top 4 beneficios
                response += f"‚Ä¢ {benefit}\n"
            response += "\n"
        
        if combo_types:
            response += f"üõçÔ∏è **Tipos de Combos Disponibles:**\n"
            for combo_type in combo_types:
                response += f"‚Ä¢ Combos de {combo_type.title()}\n"
            response += "\n"
        
        # Enlaces espec√≠ficos seg√∫n experiencia
        response += f"üîó **Enlaces Recomendados:**\n"
        if client_experience.lower() in ['empezando', 'indeciso']:
            response += "‚Ä¢ Combos Emprendedores: https://royalmayorista.com.ar/categoria-producto/combo-emprendedor/\n"
            response += "‚Ä¢ Combos de Bijou (econ√≥micos): https://royalmayorista.com.ar/categoria-producto/combo-emprendedor/combo-emprendedor-bijou/\n"
        else:
            response += "‚Ä¢ Combos de Joyas de Plata: https://royalmayorista.com.ar/categoria-producto/combo-emprendedor/combo-emprendedor-joyas/combo-emprendedor-plata/\n"
            response += "‚Ä¢ Combos Completos: https://royalmayorista.com.ar/categoria-producto/combo-emprendedor/combo-emprendedor-joyas/combo-emprendedor-plata/combos-completos/\n"
        
        logger.info(f"‚úÖ Combo recommendations generadas exitosamente")
        return response
        
    except Exception as e:
        logger.error(f"‚ùå Error en get_combo_recommendations: {str(e)}")
        return f"Hubo un problema obteniendo las recomendaciones de combos. Te paso el enlace general: https://royalmayorista.com.ar/categoria-producto/combo-emprendedor/"

@function_tool
async def get_conversation_example(scenario: str, user_message_context: str = "") -> str:
    """
    Obtiene ejemplos de conversaci√≥n para escenarios espec√≠ficos
    
    Args:
        scenario: "cliente_indeciso" | "cliente_experimentado" | "dudas_confiabilidad" | "pregunta_catalogo" | "pregunta_minimo" | "pregunta_envio"
        user_message_context: contexto del mensaje del usuario para mejor matching
    """
    
    logger.info(f"üí¨ GET_CONVERSATION_EXAMPLE llamada:")
    logger.info(f"   scenario: '{scenario}'")
    logger.info(f"   user_message_context: '{user_message_context}'")
    
    if not TRAINING_PARSER_AVAILABLE:
        return "Sistema de entrenamiento no disponible"
    
    try:
        # Buscar ejemplo espec√≠fico
        example = training_parser.get_conversation_example_by_scenario(scenario)
        
        if not example and user_message_context:
            # Buscar por contexto si no encuentra por escenario
            search_results = training_parser.search_training_content(user_message_context)
            if search_results['examples']:
                example = search_results['examples'][0]
        
        if example:
            response = f"üí¨ **Ejemplo de Conversaci√≥n - {scenario.replace('_', ' ').title()}**\n\n"
            response += f"**Usuario dice:** {example.user_message}\n\n"
            response += f"**Royal√≠a responde:** {example.royalia_response}\n\n"
            response += f"**Contexto:** {example.context}\n\n"
            
            # Agregar reglas relacionadas
            related_rules = training_parser.get_rules_by_category(example.context)
            if related_rules:
                response += f"üìã **Reglas Relacionadas:**\n"
                for rule in related_rules[:2]:
                    response += f"‚Ä¢ {rule.description}\n"
            
            logger.info(f"‚úÖ Conversation example encontrado")
            return response
        else:
            logger.warning(f"‚ö†Ô∏è No se encontr√≥ ejemplo para scenario: {scenario}")
            return f"No encontr√© un ejemplo espec√≠fico para '{scenario}'. Te recomiendo usar un enfoque natural y seguir las reglas generales de entrenamiento."
    
    except Exception as e:
        logger.error(f"‚ùå Error en get_conversation_example: {str(e)}")
        return "Hubo un problema obteniendo el ejemplo de conversaci√≥n"

@function_tool
async def get_training_rules(topic: str, rule_type: str = "all") -> str:
    """
    Obtiene reglas espec√≠ficas del entrenamiento
    
    Args:
        topic: "combos" | "productos" | "general"
        rule_type: "CRITICO" | "IMPORTANTE" | "ESPECIFICO" | "all"
    """
    
    logger.info(f"üìã GET_TRAINING_RULES llamada:")
    logger.info(f"   topic: '{topic}'")
    logger.info(f"   rule_type: '{rule_type}'")
    
    if not TRAINING_PARSER_AVAILABLE:
        return "Sistema de entrenamiento no disponible"
    
    try:
        # Obtener reglas seg√∫n topic
        if topic.lower() == "combos":
            rules = training_parser.get_rules_by_category('combos')
        elif topic.lower() == "productos":
            rules = training_parser.get_rules_by_category('productos')
        else:
            # Obtener todas las reglas
            rules = training_parser.training_rules
        
        # Filtrar por tipo de regla
        if rule_type.upper() != "ALL":
            rules = [rule for rule in rules if rule.rule_type == rule_type.upper()]
        
        if not rules:
            return f"No encontr√© reglas espec√≠ficas para '{topic}' del tipo '{rule_type}'"
        
        response = f"üìã **Reglas de Entrenamiento - {topic.title()}**\n\n"
        
        # Agrupar por tipo de regla
        rules_by_type = {}
        for rule in rules:
            if rule.rule_type not in rules_by_type:
                rules_by_type[rule.rule_type] = []
            rules_by_type[rule.rule_type].append(rule)
        
        # Mostrar por orden de importancia
        order = ["CRITICO", "IMPORTANTE", "ESPECIFICO", "GENERAL"]
        
        for rule_type_key in order:
            if rule_type_key in rules_by_type:
                icon = "üö®" if rule_type_key == "CRITICO" else "‚ö†Ô∏è" if rule_type_key == "IMPORTANTE" else "üìå"
                response += f"{icon} **{rule_type_key}:**\n"
                
                for rule in rules_by_type[rule_type_key][:5]:  # M√°ximo 5 por tipo
                    response += f"‚Ä¢ {rule.description}\n"
                response += "\n"
        
        logger.info(f"‚úÖ Training rules obtenidas: {len(rules)} reglas")
        return response
        
    except Exception as e:
        logger.error(f"‚ùå Error en get_training_rules: {str(e)}")
        return "Hubo un problema obteniendo las reglas de entrenamiento"

@function_tool
async def get_faq_response(question_topic: str) -> str:
    """
    Obtiene respuesta de FAQ seg√∫n el tema de la pregunta
    
    Args:
        question_topic: tema de la pregunta (ej: "minimo", "envio", "catalogo", "pago", "pagos" etc.)
    """
    
    logger.info(f"‚ùì GET_FAQ_RESPONSE llamada:")
    logger.info(f"   question_topic: '{question_topic}'")
    
    if not TRAINING_PARSER_AVAILABLE:
        return "Sistema de entrenamiento no disponible"
    
    try:
        # Buscar FAQ por topic
        faq = training_parser.get_faq_by_topic(question_topic)
        
        if faq:
            response = f"‚ùì **FAQ - {question_topic.title()}**\n\n"
            response += f"**P:** {faq.question}\n\n"
            response += f"**R:** {faq.answer}\n\n"
            response += f"*Fuente: {faq.category}*"
            
            logger.info(f"‚úÖ FAQ encontrada")
            return response
        else:
            # Si no encuentra FAQ exacta, buscar en todo el contenido
            search_results = training_parser.search_training_content(question_topic)
            
            if search_results['faqs']:
                faq = search_results['faqs'][0]
                response = f"‚ùì **FAQ Relacionada - {question_topic.title()}**\n\n"
                response += f"**P:** {faq.question}\n\n"
                response += f"**R:** {faq.answer}\n\n"
                response += f"*Fuente: {faq.category}*"
                
                logger.info(f"‚úÖ FAQ relacionada encontrada")
                return response
            else:
                logger.warning(f"‚ö†Ô∏è No se encontr√≥ FAQ para: {question_topic}")
                return f"No encontr√© una respuesta espec√≠fica para '{question_topic}' en las FAQs. Te recomiendo consultar la informaci√≥n general o contactar directamente."
    
    except Exception as e:
        logger.error(f"‚ùå Error en get_faq_response: {str(e)}")
        return "Hubo un problema obteniendo la respuesta FAQ"

@function_tool
async def validate_response_against_training(message: str, context: str = "") -> str:
    """
    Valida si una respuesta cumple con las reglas de entrenamiento
    
    Args:
        message: mensaje/respuesta a validar
        context: contexto de la conversaci√≥n
    """
    
    logger.info(f"‚úÖ VALIDATE_RESPONSE_AGAINST_TRAINING llamada:")
    logger.info(f"   message length: {len(message)}")
    logger.info(f"   context: '{context}'")
    
    if not TRAINING_PARSER_AVAILABLE:
        return "Sistema de validaci√≥n no disponible"
    
    try:
        validation_result = {
            'is_valid': True,
            'violations': [],
            'suggestions': [],
            'score': 100
        }
        
        message_lower = message.lower()
        
        # Validar palabras prohibidas
        mentorship_data = training_parser.get_mentorship_personality()
        if 'forbidden_words' in mentorship_data:
            forbidden_words = mentorship_data['forbidden_words']
            for word in forbidden_words:
                if word.lower() in message_lower:
                    validation_result['is_valid'] = False
                    validation_result['violations'].append(f'Palabra prohibida encontrada: "{word}"')
                    validation_result['score'] -= 10
        
        # Validar reglas cr√≠ticas
        critical_rules = training_parser.get_critical_rules()
        for rule in critical_rules:
            # Validaciones espec√≠ficas seg√∫n la regla
            if 'siempre ofrecer combos' in rule.description.lower():
                if 'empezando' in context.lower() and 'combo' not in message_lower:
                    validation_result['suggestions'].append('Se recomienda ofrecer combos a clientes que est√°n empezando')
                    validation_result['score'] -= 5
            
            elif 'nunca ofrecer combos sin explicar' in rule.description.lower():
                if 'combo' in message_lower and 'beneficio' not in message_lower:
                    validation_result['suggestions'].append('Al ofrecer combos, siempre explicar los beneficios')
                    validation_result['score'] -= 5
        
        # Validar personalidad argentina con variedad
        argentine_indicators = [
            'mir√°', 'b√°rbaro', 'genial', 'joya', 'posta', 'claro', 'perfecto', 
            'buen√≠simo', 'excelente', 'obvio', 'tranquila', 'laburo', 'ojo', 
            'che', 'vos', 'ten√©s', 'quer√©s', 'pod√©s', 'dale'  # dale al final
        ]
        has_argentine_tone = any(indicator in message_lower for indicator in argentine_indicators)
        
        # Detectar abuso de "dale"
        dale_count = message_lower.count('dale')
        if dale_count > 1:
            validation_result['suggestions'].append('Evitar usar "dale" m√∫ltiples veces. Variar con: "Perfecto", "Claro", "Excelente"')
            validation_result['score'] -= 5
        
        if not has_argentine_tone and len(message) > 50:
            validation_result['suggestions'].append('Considerar usar m√°s expresiones argentinas variadas para mantener el tono local')
            validation_result['score'] -= 3
        
        # Preparar respuesta
        if validation_result['is_valid'] and validation_result['score'] >= 90:
            response = f"‚úÖ **Respuesta V√ÅLIDA** (Puntaje: {validation_result['score']}/100)\n\n"
            response += "La respuesta cumple con las reglas de entrenamiento."
        else:
            response = f"‚ö†Ô∏è **Respuesta con Observaciones** (Puntaje: {validation_result['score']}/100)\n\n"
        
        if validation_result['violations']:
            response += f"üö® **Violaciones Encontradas:**\n"
            for violation in validation_result['violations']:
                response += f"‚Ä¢ {violation}\n"
            response += "\n"
        
        if validation_result['suggestions']:
            response += f"üí° **Sugerencias de Mejora:**\n"
            for suggestion in validation_result['suggestions']:
                response += f"‚Ä¢ {suggestion}\n"
        
        logger.info(f"‚úÖ Validation completada. Score: {validation_result['score']}/100")
        return response
        
    except Exception as e:
        logger.error(f"‚ùå Error en validate_response_against_training: {str(e)}")
        return "Hubo un problema validando la respuesta"

@function_tool
async def get_personality_guidance() -> str:
    """
    Obtiene orientaci√≥n sobre la personalidad y tono de Royal√≠a
    """
    
    logger.info("üé≠ GET_PERSONALITY_GUIDANCE llamada")
    
    if not TRAINING_PARSER_AVAILABLE:
        return "Sistema de entrenamiento no disponible"
    
    try:
        personality = training_parser.get_mentorship_personality()
        
        response = "üé≠ **Gu√≠a de Personalidad Royal√≠a**\n\n"
        
        if 'personality_traits' in personality and personality['personality_traits']:
            response += "‚ú® **Rasgos de Personalidad:**\n"
            for trait in personality['personality_traits'][:5]:
                response += f"‚Ä¢ {trait}\n"
            response += "\n"
        
        if 'approach' in personality and personality['approach']:
            response += "ü§ù **Enfoque de Mentor√≠a:**\n"
            for approach in personality['approach'][:3]:
                response += f"‚Ä¢ {approach}\n"
            response += "\n"
        
        if 'forbidden_words' in personality and personality['forbidden_words']:
            response += "üö´ **Palabras a Evitar:**\n"
            for word in personality['forbidden_words'][:10]:
                response += f"‚Ä¢ {word}\n"
            response += "\n"
        
        response += "üéØ **Palabras Recomendadas (con VARIACI√ìN):**\n"
        response += "‚Ä¢ **Inicios variados**: Perfecto, Claro, Te explico, B√°rbaro, Genial, Excelente, Buen√≠simo\n"
        response += "‚Ä¢ **Argentinismos**: mir√°, ojo, posta, joya, tranquila, laburo, obvio\n"
        response += "‚Ä¢ **ROTAR 'dale'**: usar m√°ximo 1 vez cada 5 respuestas\n"
        response += "‚Ä¢ Evitar formalidad excesiva\n"
        response += "‚Ä¢ Mantener tono argentino natural y amigable\n"
        
        logger.info("‚úÖ Personality guidance generada")
        return response
        
    except Exception as e:
        logger.error(f"‚ùå Error en get_personality_guidance: {str(e)}")
        return "Hubo un problema obteniendo la gu√≠a de personalidad"

@function_tool
async def get_basic_company_info(info_type: str) -> str:
    """
    Obtiene informaci√≥n b√°sica de la empresa con enlaces seg√∫n el tipo solicitado
    
    Args:
        info_type: "catalogo" | "minimo" | "envio" | "pago" | "confiabilidad" | "local" | "general"
    """
    
    logger.info(f"üè¢ GET_BASIC_COMPANY_INFO llamada:")
    logger.info(f"   info_type: '{info_type}'")
    
    # Informaci√≥n b√°sica con enlaces espec√≠ficos seg√∫n el entrenamiento
    basic_info = {
        "catalogo": {
            "response": "Te paso nuestro cat√°logo mayorista https://royalmayorista.com.ar/ En Royal vas a encontrar joyas, relojes, lentes, bijouterie, maquillaje e indumentaria, todo al por mayor para que tengas m√°s variedad y m√°s ventas. Adem√°s, te acompa√±o como mentora para ayudarte a organizarte, armar promociones o lo que necesites en tu emprendimiento. Contame un poco de vos, ¬øya ten√©s experiencia revendiendo o est√°s por empezar tu emprendimiento?",
            "links": ["https://royalmayorista.com.ar/"]
        },
        "minimo": {
            "response": "El m√≠nimo es de $40.000, y con compras desde $100.000 te hacemos el env√≠o gratis. Adem√°s, cuando compr√°s en Royal no solo acced√©s a productos de calidad a precios mayoristas, sino que te acompa√±o como mentora para ayudarte a hacer crecer tu emprendimiento: desde ideas de publicaciones hasta planificaci√≥n de ventas. ¬øYa est√°s vendiendo o est√°s por arrancar tu negocio?",
            "links": []
        },
        "envio": {
            "response": "S√≠, hacemos env√≠os a todo el pa√≠s. Gratis a partir de $100.000 de compra. Lo mejor es que en Royal no solo consegu√≠s productos, sino que ten√©s una mentora a disposici√≥n. Si quer√©s, te puedo ayudar a organizar tu semana de ventas o armar tu primera oferta para tus redes. ¬øDesde qu√© ciudad est√°s escribiendo? ¬øYa ten√©s redes para tu emprendimiento?",
            "links": []
        },
        "pago": {
            "response": "S√≠. Pod√©s pagar con tarjeta de cr√©dito en 1 cuota sin inter√©s o d√©bito. Tambi√©n transferencia bancaria sin recargo. Adem√°s, te acompa√±o en el proceso de venta: si quer√©s te puedo ayudar a armar promos seg√∫n los m√©todos de pago que elijan tus clientas, para que aproveches al m√°ximo cada venta. ¬øYa ten√©s armado tu cat√°logo personalizado para vender?",
            "links": []
        },
        "confiabilidad": {
            "response": "Royal tiene 7 a√±os en el mercado, m√°s de 30.000 emprendedoras ya trabajan con nosotros, tenemos locales f√≠sicos en C√≥rdoba capital y redes verificadas. Adem√°s, te acompa√±o en todo el proceso. Mi trabajo es ayudarte a que puedas emprender con seguridad y confianza. Incluso te puedo ayudar a organizar publicaciones, precios, ideas para vender mejor. ¬øYa estuviste emprendiendo antes o ser√≠a tu primer negocio?",
            "links": []
        },
        "local": {
            "response": "S√≠. Pod√©s retirar en nuestros locales en C√≥rdoba Capital. Adem√°s de los productos, ten√©s mi acompa√±amiento como mentora para ayudarte a crecer con tu emprendimiento. Ideas, planificaci√≥n, contenido, promociones, lo que necesites. ¬øDesde qu√© zona sos? ¬øYa est√°s vendiendo por redes o por WhatsApp?",
            "links": []
        },
        "catalogo_sin_logo": {
            "response": "S√≠. Te paso el enlace con el cat√°logo sin logo para que puedas ofrecer los productos a tus clientas: https://royalmayorista.com.ar/ Si quer√©s te puedo dar ideas de textos o historias para que vendas m√°s con esas fotos. ¬øYa est√°s vendiendo por WhatsApp, Instagram o reci√©n arranc√°s?",
            "links": ["https://royalmayorista.com.ar/"]
        },
        "joyas_plata": {
            "response": "Te paso la categor√≠a de joyas de plata 925: https://royalmayorista.com.ar/categoria-producto/royal-joyas/ All√≠ encontrar√°s aros, anillos, dijes, cadenas y pulseras, todos con certificado de autenticidad de Royal. Como mentora, tambi√©n puedo ayudarte a planificar c√≥mo presentar estas piezas, armar promociones o definir precios. ¬øYa vend√©s joyas por tu cuenta o est√°s armando tu emprendimiento?",
            "links": ["https://royalmayorista.com.ar/categoria-producto/royal-joyas/"]
        },
        "bijou": {
            "response": "Ac√° ten√©s nuestra categor√≠a de insumos para bijou: https://royalmayorista.com.ar/categoria-producto/bijou/ Vas a encontrar bases, piedras, hilos, dijes y todo lo necesario para armar accesorios. Adem√°s, te puedo acompa√±ar en la estructura de costos, armado de kits y estrategias de venta para bijouterie. ¬øQu√© te parece?",
            "links": ["https://royalmayorista.com.ar/categoria-producto/bijou/"]
        }
    }
    
    try:
        info = basic_info.get(info_type.lower())
        
        if info:
            response = f"üìã **Informaci√≥n de Royal - {info_type.title()}**\n\n"
            response += info['response']
            
            if info['links']:
                response += f"\n\nüîó **Enlaces:**\n"
                for link in info['links']:
                    response += f"‚Ä¢ {link}\n"
            
            logger.info(f"‚úÖ Basic company info enviada para: {info_type}")
            return response
        else:
            # Informaci√≥n general si no encuentra tipo espec√≠fico
            general_response = "En Royal tenemos productos al por mayor: joyas, relojes, maquillaje, indumentaria y m√°s. "
            general_response += "M√≠nimo $40.000, env√≠o gratis desde $100.000. "
            general_response += "Cat√°logo completo: https://royalmayorista.com.ar/ "
            general_response += "¬øEn qu√© te puedo ayudar espec√≠ficamente?"
            
            logger.info(f"‚úÖ Basic company info general enviada")
            return general_response
            
    except Exception as e:
        logger.error(f"‚ùå Error en get_basic_company_info: {str(e)}")
        return "Hubo un problema obteniendo la informaci√≥n. Te recomiendo visitar https://royalmayorista.com.ar/ para ver nuestro cat√°logo completo."

@function_tool
async def search_training_content(query: str) -> str:
    """
    Busca contenido espec√≠fico en todo el material de entrenamiento
    
    Args:
        query: t√©rmino de b√∫squeda
    """
    
    logger.info(f"üîç SEARCH_TRAINING_CONTENT llamada:")
    logger.info(f"   query: '{query}'")
    
    if not TRAINING_PARSER_AVAILABLE:
        return "Sistema de b√∫squeda no disponible"
    
    try:
        results = training_parser.search_training_content(query)
        
        response = f"üîç **Resultados de B√∫squeda: '{query}'**\n\n"
        
        total_results = sum(len(results[key]) for key in results.keys())
        
        if total_results == 0:
            return f"No encontr√© contenido relacionado con '{query}' en el material de entrenamiento."
        
        response += f"üìä **Total de resultados encontrados:** {total_results}\n\n"
        
        if results['examples']:
            response += f"üí¨ **Ejemplos de Conversaci√≥n ({len(results['examples'])}):**\n"
            for example in results['examples'][:2]:  # Mostrar m√°ximo 2
                response += f"‚Ä¢ *{example.user_message[:60]}...* ‚Üí *{example.royalia_response[:80]}...*\n"
            response += "\n"
        
        if results['rules']:
            response += f"üìã **Reglas Relacionadas ({len(results['rules'])}):**\n"
            for rule in results['rules'][:3]:  # Mostrar m√°ximo 3
                response += f"‚Ä¢ {rule.description[:100]}...\n"
            response += "\n"
        
        if results['faqs']:
            response += f"‚ùì **FAQs Relacionadas ({len(results['faqs'])}):**\n"
            for faq in results['faqs'][:2]:  # Mostrar m√°ximo 2
                response += f"‚Ä¢ **P:** {faq.question[:60]}...\n"
                response += f"  **R:** {faq.answer[:80]}...\n"
            response += "\n"
        
        if results['links']:
            response += f"üîó **Enlaces Relevantes ({len(results['links'])}):**\n"
            for link in results['links'][:3]:  # Mostrar m√°ximo 3
                response += f"‚Ä¢ {link}\n"
        
        logger.info(f"‚úÖ Search completada. {total_results} resultados encontrados")
        return response
        
    except Exception as e:
        logger.error(f"‚ùå Error en search_training_content: {str(e)}")
        return f"Hubo un problema buscando '{query}' en el contenido de entrenamiento"

def create_training_tools():
    """Crea todas las herramientas de entrenamiento MCP"""
    
    tools = [
        get_combo_recommendations,
        get_conversation_example,
        get_training_rules,
        get_faq_response,
        get_basic_company_info,
        validate_response_against_training,
        get_personality_guidance,
        search_training_content
    ]
    
    logger.info(f"‚úÖ Training Tools creadas: {len(tools)} herramientas disponibles")
    return tools

# Log de disponibilidad
if TRAINING_PARSER_AVAILABLE:
    logger.info("‚úÖ Training MCP Tools completamente disponibles")
else:
    logger.error("‚ùå Training MCP Tools con funcionalidad limitada") 