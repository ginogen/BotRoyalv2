# Contextual Tools para Royal Bot v2
# Herramientas que usan el contexto de conversaci√≥n siguiendo el patr√≥n de OpenAI Agents

from typing import Dict, List, Any, Optional, Tuple, Union, cast
from agents import function_tool, RunContextWrapper  # type: ignore
from .conversation_context import RoyalAgentContext, ProductReference
from .woocommerce_mcp_tools import wc_client
from .training_mcp_tools import training_parser, TRAINING_PARSER_AVAILABLE
import logging
import re

# Category matcher para b√∫squeda de categor√≠as
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from category_matcher import find_categories, format_categories_for_user, extract_product_keywords

logger = logging.getLogger(__name__)

# Tipos para respuestas de API WooCommerce
WooCommerceProduct = Dict[str, Any]
APIResponse = Union[List[WooCommerceProduct], Dict[str, Any]]

@function_tool
async def detect_user_frustration(wrapper: RunContextWrapper[RoyalAgentContext], user_message: str) -> str:
    """
    Detecta si el usuario necesita asistencia adicional o tiene dificultades y activa protocolo HITL.
    
    Args:
        user_message: Mensaje del usuario para analizar necesidad de asistencia
    """
    
    context = wrapper.context
    conversation = context.conversation
    
    logger.info(f"üò§ DETECT_USER_FRUSTRATION para usuario: {context.user_id}")
    logger.info(f"   Mensaje: {user_message}")
    
    # Palabras/frases que indican necesidad de asistencia - EXPANDIDA
    frustration_indicators = [
        # Enojo directo
        'no funciona', 'no sirve', 'terrible', 'p√©simo', 'horrible', 'mal√≠simo',
        'una porquer√≠a', 'una mierda', 'no anda', 'roto', 'falla',
        
        # Frustraci√≥n y descontento - NUEVAS
        'no me gusta', 'no me gustan', 'no me convence', 'no me sirve', 
        'no me ayuda', 'confundido', 'perdido', 'desastre', 'son un desastre',
        'es un desastre', 'qu√© desastre', 'no entiendo', 'no logro', 'no puedo',
        
        # Expresiones de disconformidad - NUEVAS
        'me molesta', 'me fastidia', 'me cansa', 'estoy harto', 'estoy cansado',
        'esto no va', 'no me gusta esto', 'esto es horrible', 'esto es terrible',
        
        # Quejas
        'siempre lo mismo', 'otra vez', 'de nuevo', 'nunca funciona',
        'hartos', 'cansado', 'aburrido', 'fastidio', 'imposible', 'complicado',
        
        # Problemas urgentes
        'urgente', 'r√°pido', 'ya', 'inmediatamente', 'problema grave',
        'error', 'falla', 'no me llega', 'perd√≠', 'se perdi√≥',
        
        # Expresiones argentinas de disconformidad
        'qu√© quilombo', 'qu√© bardo', 'no da', 'una garompa', 'un desastre',
        'no va', 'est√° roto', 'no me anda', 'qu√© embole', 'es un bodrio'
    ]
    
    message_lower = user_message.lower()
    
    # Detectar indicadores de asistencia necesaria
    frustration_found: List[str] = []
    for indicator in frustration_indicators:
        if indicator in message_lower:
            frustration_found.append(indicator)
    
    # Detectar patrones de asistencia necesaria - MEJORADOS
    patterns = [
        r'no (me )?(\w+)',  # "no me funciona", "no anda", "no me gusta"
        r'por qu√© no (\w+)',  # "por qu√© no funciona"
        r'(nunca|siempre) (\w+)',  # "nunca funciona", "siempre falla"
        r'(\w+) (mal|terrible|p√©simo|horrible)',  # "funciona mal"
        r'esto (no|es) (\w+)',  # "esto no va", "esto es horrible"
        r'son un (\w+)',  # "son un desastre"
        r'es un (\w+)',  # "es un desastre"
        r'qu√© (\w+)',  # "qu√© desastre", "qu√© horror"
    ]
    
    pattern_matches: List[Tuple[str, ...]] = []
    for pattern in patterns:
        matches = re.findall(pattern, message_lower)
        if matches:
            pattern_matches.extend(matches)
    
    # NUEVO: Detectar negatividad extrema con palabras cortas
    negative_short_phrases = ['no', 'mal', 'feo', 'asco', 'odio']
    if len(message_lower.split()) <= 3:  # Mensajes cortos muy negativos
        for phrase in negative_short_phrases:
            if phrase in message_lower:
                frustration_found.append(f"negative_short: {phrase}")
    
    # Determinar nivel de asistencia necesaria - MEJORADO
    frustration_level = 0
    
    # Nivel alto: m√∫ltiples indicadores o frases muy negativas
    if len(frustration_found) >= 2 or any('desastre' in word for word in frustration_found):
        frustration_level = 3  # Alto
    elif len(frustration_found) == 1 or len(pattern_matches) >= 1:
        frustration_level = 2  # Medio
    elif any(word in message_lower for word in ['problema', 'ayuda', 'dudas', 'confuso']):
        frustration_level = 1  # Bajo
    
    # NUEVO: Detectar si es respuesta negativa corta despu√©s de mostrar productos
    if (conversation.current_state == "selecting" and 
        len(user_message.split()) <= 4 and 
        any(neg in message_lower for neg in ['no', 'mal', 'feo', 'asco'])):
        frustration_level = max(frustration_level, 2)  # M√≠nimo nivel medio
        frustration_found.append("negative_response_to_products")
    
    # Registrar en contexto
    if frustration_level > 0:
        conversation.add_interaction("system", f"Usuario necesita asistencia adicional: nivel {frustration_level}")
        conversation.update_user_profile("assistance_level", frustration_level)
        conversation.current_state = "needs_assistance"
        
        logger.warning(f"‚ö†Ô∏è ASISTENCIA REQUERIDA - Nivel: {frustration_level}")
        logger.warning(f"   Indicadores: {frustration_found}")
        logger.warning(f"   Patrones: {pattern_matches}")
        
        # Convertir pattern_matches a strings para poder sumarlos
        pattern_strings = [str(match) for match in pattern_matches]
        total_indicators = len(frustration_found + pattern_strings)
        
        return f"ASSISTANCE_NEEDED|level={frustration_level}|indicators={total_indicators}"
    
    return "NO_FRUSTRATION_DETECTED"

@function_tool
async def handle_missing_information_hitl(
    wrapper: RunContextWrapper[RoyalAgentContext], 
    information_type: str,
    context_description: str = ""
) -> str:
    """
    Maneja situaciones donde el bot no tiene informaci√≥n y activa protocolo HITL.
    
    Args:
        information_type: Tipo de informaci√≥n faltante (product, price, stock, shipping, etc.)
        context_description: Descripci√≥n del contexto para logging
    """
    
    context = wrapper.context
    conversation = context.conversation
    
    logger.info(f"üÜò HANDLE_MISSING_INFORMATION_HITL para usuario: {context.user_id}")
    logger.info(f"   Tipo: {information_type}")
    logger.info(f"   Contexto: {context_description}")
    
    # Registrar en contexto que necesita asistencia humana
    conversation.add_interaction("system", f"Informaci√≥n faltante: {information_type}")
    conversation.update_user_profile("needs_human_assistance", True)
    conversation.update_user_profile("missing_info_type", information_type)
    conversation.current_state = "pending_human_assistance"
    
    # Respuestas argentinas naturales seg√∫n el tipo
    hitl_responses = {
        'product': [
            "Dale, dejame que chequeo eso puntualmente en el sistema y te confirmo ahora",
            "tengo que verificar eso con el equipo. Dame un momento que te traigo la info completa",
            "Mir√°, eso lo tengo que consultar espec√≠ficamente. En un ratito te confirmo todo",
            "d√©jame que reviso eso en detalle y te paso los datos exactos"
        ],
        'price': [
            "Los precios me los est√°n actualizando justo ahora. Dame un minuto que te confirmo el valor exacto",
            "tengo que chequear el precio actualizado. Ahora te traigo el dato preciso",
            "Dale, dejame que reviso el valor actual y te confirmo en un moemento",
            "D√©jame verificar el precio  y te paso la info"
        ],
        'stock': [
            "El stock lo tengo que verificar en tiempo real. Un segundo que chequeo y te confirmo",
            "Dale, que consulto la disponibilidad exacta y te digo",
            "Tengo que ver qu√© hay disponible ahora mismo. Ya te confirmo",
            "Dejame que reviso el inventario actualizado y te paso el dato"
        ],
        'shipping': [
            "Los env√≠os tengo que consultarlos seg√∫n tu zona espec√≠fica. Ya te digo",
            "ara el env√≠o necesito chequear tu ubicaci√≥n exacta. Ahora te confirmo",
            "Dale, que verifico las opciones de env√≠o para tu zona y te cuento",
            "Tengo que consultar las opciones de entrega para donde est√°s. Un momento"
        ],
        'technical': [
            "Uy, se me est√° complicando el sistema. Dame un momento que lo soluciono",
            "Tengo un problemita t√©cnico. Ya lo arreglo y te ayudo como corresponde",
            "Se me trab√≥ algo ac√°. Un segundo que lo destrab√≥ y seguimos",
            "Perd√≥n, se me colg√≥ algo. Ya vuelvo con toda la info que necesit√°s"
        ],
        'general': [
            "Dale, tengo que chequear eso puntualmente. Dame un ratito y te confirmo todo",
            "Esa info la tengo que verificar bien. En un momento te respondo",
            "Dejame que consulto eso espec√≠ficamente y te paso toda la informaci√≥n",
            "eso lo tengo que revisar con detalle. Ahora te confirmo"
        ]
    }
    
    # Seleccionar respuesta seg√∫n el tipo
    import random
    responses = hitl_responses.get(information_type, hitl_responses['general'])
    selected_response = random.choice(responses)
    
    # Agregar contexto espec√≠fico si es necesario
    if information_type == 'product' and context_description:
        selected_response += f" (sobre {context_description})"
    
    # Agregar emoji de confianza
    selected_response += " üëç"
    
    logger.warning(f"üö® HITL ACTIVADO - Usuario necesita asistencia humana")
    logger.warning(f"   Respuesta generada: {selected_response}")
    
    return f"HITL_ACTIVATED|{selected_response}"

@function_tool
async def check_mcp_connectivity_and_fallback(wrapper: RunContextWrapper[RoyalAgentContext]) -> str:
    """
    Verifica conectividad MCP y activa fallback/HITL si hay problemas.
    """
    
    context = wrapper.context
    conversation = context.conversation
    
    logger.info(f"üîå CHECK_MCP_CONNECTIVITY para usuario: {context.user_id}")
    
         # Test b√°sico de conectividad WooCommerce
    try:
        test_result = await wc_client.make_request('products', {'per_page': 1})
        
        if 'error' in test_result:
            logger.error(f"‚ùå MCP WooCommerce con errores: {test_result['error']}")
            
            # Activar HITL por problemas t√©cnicos directamente
            conversation.add_interaction("system", "Informaci√≥n faltante: technical")
            conversation.update_user_profile("needs_human_assistance", True)
            conversation.current_state = "pending_human_assistance"
            
            import random
            responses = [
                "Uy, se me est√° complicando el sistema. Dame un momento que lo soluciono üëç",
                "Tengo un problemita t√©cnico. Ya lo arreglo y te ayudo como corresponde üëç",
                "Se me trab√≥ algo ac√°. Un segundo que lo destrab√≥ y seguimos üëç"
            ]
            return f"HITL_ACTIVATED|{random.choice(responses)}"
        else:
            logger.info("‚úÖ MCP WooCommerce operativo")
            return "MCP_WORKING"
            
    except Exception as e:
        logger.error(f"‚ùå MCP WooCommerce falla completa: {str(e)}")
        
        # Activar HITL por falla t√©cnica directamente
        conversation.add_interaction("system", "Informaci√≥n faltante: technical")
        conversation.update_user_profile("needs_human_assistance", True)
        conversation.current_state = "pending_human_assistance"
        
        import random
        responses = [
            "Perd√≥n, se me colg√≥ algo. Ya vuelvo con toda la info que necesit√°s üëç",
            "Uy, se me complic√≥ el sistema. Dame un momento que lo soluciono üëç"
        ]
        return f"HITL_ACTIVATED|{random.choice(responses)}"

@function_tool
async def escalate_to_human_support(
    wrapper: RunContextWrapper[RoyalAgentContext],
    escalation_reason: str,
    user_context: str = ""
) -> str:
    """
    Escala autom√°ticamente a soporte humano con contexto completo.
    
    Args:
        escalation_reason: Raz√≥n de la escalaci√≥n (frustration, missing_info, complex_query, etc.)
        user_context: Contexto adicional del usuario
    """
    
    context = wrapper.context
    conversation = context.conversation
    
    logger.info(f"üö® ESCALATE_TO_HUMAN_SUPPORT para usuario: {context.user_id}")
    logger.info(f"   Raz√≥n: {escalation_reason}")
    logger.info(f"   Contexto: {user_context}")
    
    # Registrar escalaci√≥n en contexto
    conversation.add_interaction("system", f"Escalado a humano: {escalation_reason}")
    conversation.update_user_profile("escalated_to_human", True)
    conversation.update_user_profile("escalation_reason", escalation_reason)
    conversation.current_state = "escalated_to_human"
    
    # Generar resumen para el humano
    user_summary = f"""
üö® ESCALACI√ìN AUTOM√ÅTICA - Usuario: {context.user_id}
üìã Raz√≥n: {escalation_reason}
üïê Tiempo de conversaci√≥n: {len(conversation.interaction_history)} interacciones
üéØ Estado: {conversation.current_state}

üë§ PERFIL DEL USUARIO:
- Emprendedor: {conversation.is_entrepreneur} ({conversation.experience_level})
- Intereses: {', '.join(conversation.product_interests[-3:]) if conversation.product_interests else 'No especificados'}
- Presupuesto: {conversation.budget_range or 'No especificado'}

üì¶ PRODUCTOS RECIENTES EN MEMORIA:
{conversation.get_recent_products_summary() if conversation.recent_products else 'Ninguno'}

üí¨ √öLTIMAS INTERACCIONES:
"""
    
    for interaction in conversation.interaction_history[-3:]:
        role = "üë§ Usuario" if interaction["role"] == "user" else "ü§ñ Royalia"
        message = interaction["message"][:100] + "..." if len(interaction["message"]) > 100 else interaction["message"]
        user_summary += f"{role}: {message}\n"
    
    if user_context:
        user_summary += f"\nüîç CONTEXTO ADICIONAL: {user_context}"
    
    # Log para el equipo humano
    logger.critical("üö®üö® ESCALACI√ìN A SOPORTE HUMANO üö®üö®")
    logger.critical(user_summary)
    
    # Respuesta natural argentina para el usuario
    escalation_responses = {
        'frustration': [
            "Dale, mejor que hable con vos directamente alguien del equipo. Ya le paso tu consulta a mi supervisor",
            "Te voy a conectar con alguien m√°s especializado que te va a resolver esto al toque",
            "Para esto necesit√°s hablar directamente con el equipo. Ya les aviso para que te contacten",
        ],
        'missing_info': [
            "Mir√°, mejor que hable con vos directamente alguien que tenga toda la info. Ya los contacto",
            "Dale, que para esto necesit√°s hablar con el equipo especializado. Te van a contactar",
            "Uy, esto lo tiene que ver espec√≠ficamente el equipo t√©cnico. Ya les aviso para que te llamen",
        ],
        'complex_query': [
            "Esta consulta est√° muy espec√≠fica, mejor que te atienda alguien especializado. Ya los aviso",
            "Para esto necesit√°s hablar con el equipo t√©cnico directamente. Te van a contactar",
            "Dale, esto lo tiene que manejar alguien con m√°s experiencia. Ya escal√© el tema",
        ],
        'technical_issue': [
            "Uy, se me complic√≥ el sistema. Ya avis√© al equipo t√©cnico para que te contacten directamente",
            "Tengo un problema t√©cnico que me impide ayudarte bien. El equipo ya est√° al tanto",
            "Se me trab√≥ algo importante. Ya escal√© para que te atiendan como corresponde",
        ]
    }
    
    import random
    responses = escalation_responses.get(escalation_reason, escalation_responses['missing_info'])
    selected_response = random.choice(responses)
    
    # Agregar timeframe realista
    selected_response += " En breve te van a contactar. üìû"
    
    # üö® NUEVA FUNCIONALIDAD: Notificaci√≥n autom√°tica a equipo via WhatsApp
    try:
        # Determinar team_id seg√∫n el tipo de escalaci√≥n
        team_id = 0
        if escalation_reason == 'frustration':
            team_id = getattr(__import__('royal_server_optimized'), 'CHATWOOT_TEAM_ASSISTANCE_ID', 0)
        elif escalation_reason in ['missing_info', 'technical_issue']:
            team_id = getattr(__import__('royal_server_optimized'), 'CHATWOOT_TEAM_SUPPORT_ID', 0)
        elif escalation_reason == 'complex_query':
            team_id = getattr(__import__('royal_server_optimized'), 'CHATWOOT_TEAM_GENERAL_ID', 0)
        else:
            team_id = getattr(__import__('royal_server_optimized'), 'CHATWOOT_TEAM_ASSISTANCE_ID', 0)
        
        # Obtener funciones del server
        if team_id > 0:
            server_module = __import__('royal_server_optimized')
            assign_conversation_func = getattr(server_module, 'assign_conversation_to_team', None)
            send_notification_func = getattr(server_module, 'send_team_whatsapp_notification', None)
            
            if assign_conversation_func and send_notification_func:
                # Asignar conversaci√≥n al equipo (si tenemos conversation_id)
                conversation_id = getattr(wrapper.context, 'conversation_id', None)
                if conversation_id:
                    await assign_conversation_func(conversation_id, team_id, f"Escalaci√≥n: {escalation_reason}")
                
                # Enviar notificaci√≥n WhatsApp al equipo
                await send_notification_func(
                    team_id=team_id,
                    user_name=context.user_id,
                    user_phone=getattr(wrapper.context, 'phone', 'No disponible'),
                    escalation_reason=escalation_reason,
                    context_summary=user_summary
                )
                
                logger.info(f"‚úÖ Escalaci√≥n completa: Chatwoot + WhatsApp team {team_id}")
            else:
                logger.warning("‚ö†Ô∏è Funciones de escalaci√≥n no disponibles")
        else:
            logger.warning(f"‚ö†Ô∏è No hay team_id configurado para {escalation_reason}")
            
    except Exception as e:
        # Si falla la notificaci√≥n, no afectar la escalaci√≥n principal
        logger.error(f"‚ùå Error en notificaci√≥n autom√°tica: {e}")
        logger.warning("‚ö†Ô∏è Escalaci√≥n contin√∫a sin notificaci√≥n autom√°tica")
    
    return f"ESCALATED_TO_HUMAN|{selected_response}"

@function_tool
async def get_context_summary(wrapper: RunContextWrapper[RoyalAgentContext]) -> str:
    """
    Obtiene resumen del contexto actual de la conversaci√≥n.
    Esta herramienta permite al LLM acceder a la informaci√≥n de contexto.
    """
    
    context = wrapper.context
    conversation = context.conversation
    
    logger.info(f"üìã GET_CONTEXT_SUMMARY para usuario: {context.user_id}")
    
    summary_parts = []
    
    # Informaci√≥n del usuario
    summary_parts.append(f"üë§ **Usuario:** {context.user_id}")
    summary_parts.append(f"‚è∞ **√öltima interacci√≥n:** {conversation.last_interaction.strftime('%H:%M:%S')}")
    summary_parts.append(f"üîÑ **Estado actual:** {conversation.current_state}")
    
    # Verificar si necesita asistencia humana
    if conversation.user_profile.get("needs_human_assistance"):
        summary_parts.append("üö® **ALERTA:** Usuario necesita asistencia humana")
        
    if conversation.user_profile.get("assistance_level", 0) > 0:
        level = conversation.user_profile.get("assistance_level")
        summary_parts.append(f"üÜò **NECESITA ASISTENCIA:** Nivel {level}/3")
    
    # Perfil del usuario
    if conversation.is_entrepreneur:
        summary_parts.append(f"üöÄ **Perfil:** Emprendedor ({conversation.experience_level})")
        
    if conversation.product_interests:
        interests = ", ".join(conversation.product_interests[-3:])
        summary_parts.append(f"üí° **Intereses:** {interests}")
        
    if conversation.budget_range:
        summary_parts.append(f"üí∞ **Presupuesto:** {conversation.budget_range}")
    
    # Productos recientes
    if conversation.recent_products:
        summary_parts.append(f"\nüì¶ **Productos mostrados recientemente ({len(conversation.recent_products)}):**")
        for i, product in enumerate(conversation.recent_products[-5:], 1):
            summary_parts.append(f"  {i}. {product.name} - ${product.price}")
    
    # Historial reciente
    if conversation.interaction_history:
        summary_parts.append(f"\nüí¨ **√öltimas interacciones ({len(conversation.interaction_history)}):**")
        for interaction in conversation.interaction_history[-3:]:
            role = "Usuario" if interaction["role"] == "user" else "Asistente"
            message = interaction["message"][:80] + "..." if len(interaction["message"]) > 80 else interaction["message"]
            summary_parts.append(f"  {role}: {message}")
    
    logger.info(f"‚úÖ Context summary generado: {len(summary_parts)} elementos")
    return "\n".join(summary_parts)

@function_tool
async def get_product_info_with_context(
    wrapper: RunContextWrapper[RoyalAgentContext], 
    product_name: str = "", 
    product_id: str = "", 
    category: str = ""
) -> str:
    """
    Obtiene informaci√≥n de productos y los guarda en el contexto de la conversaci√≥n.
    """
    
    context = wrapper.context
    conversation = context.conversation
    
    logger.info(f"üîç GET_PRODUCT_INFO_WITH_CONTEXT para usuario: {context.user_id}")
    logger.info(f"   B√∫squeda: {product_name or category or product_id}")
    
    # Llamar a la funci√≥n original de WooCommerce
    params = {}
    if product_name:
        params['search'] = product_name
    if product_id:
        params['include'] = product_id
    if category:
        params['category'] = category
    
    result = await wc_client.make_request('products', params)
    
    if 'error' in result:
        logger.error(f"‚ùå Error obteniendo productos: {result['error']}")
        # Activar HITL en lugar de decir "no pude obtener"
        conversation.add_interaction("system", f"Informaci√≥n faltante: product")
        conversation.update_user_profile("needs_human_assistance", True) 
        conversation.current_state = "pending_human_assistance"
        
        import random
        responses = [
            "Dale, dejame que chequeo eso puntualmente en el sistema y te confirmo ahora üëç",
            "Upa, tengo que verificar eso con el equipo. Dame un toque que te traigo la info completa üëç", 
            "Mir√°, eso lo tengo que consultar espec√≠ficamente. En un ratito te confirmo todo üëç"
        ]
        return random.choice(responses)
    
    # Asegurar que products es una lista de productos
    products: List[WooCommerceProduct] = result if isinstance(result, list) else []
    
    if not products:
        logger.info("   No se encontraron productos")
        # Activar HITL en lugar de decir "no encontr√©"
        conversation.add_interaction("system", f"Informaci√≥n faltante: product") 
        conversation.update_user_profile("needs_human_assistance", True)
        conversation.current_state = "pending_human_assistance"
        
        import random
        responses = [
            "Dale, dejame que chequeo eso puntualmente y te confirmo si tenemos algo similar üëç",
            "Tengo que verificar bien el inventario para esa b√∫squeda. Ya te confirmo üëç",
            "D√©jame que reviso eso en detalle y te paso opciones disponibles üëç"
        ]
        return random.choice(responses)
    
    # Guardar productos en el contexto
    products_saved = []
    for product in products[:5]:  # M√°ximo 5 productos
        # Obtener datos del producto con valores por defecto
        name = str(product.get('name', 'Sin nombre'))
        price = str(product.get('price', product.get('regular_price', 'Consultar')))
        product_id = str(product.get('id', ''))
        permalink = str(product.get('permalink', ''))
        
        # Obtener categor√≠a de forma segura
        categories = cast(List[Dict[str, Any]], product.get('categories', []))
        category = categories[0].get('name', '') if categories else ''
        
        product_ref = ProductReference(
            name=name,
            price=price,
            id=product_id,
            permalink=permalink,
            category=str(category)
        )
        
        conversation.add_product_reference(product_ref)
        products_saved.append(product_ref)
    
    # Actualizar estado de la conversaci√≥n
    conversation.current_state = "selecting"
    conversation.add_interaction("assistant", f"Mostr√© {len(products_saved)} productos de {product_name or category}")
    
    # Formatear respuesta
    products_info = []
    for i, product in enumerate(products[:5], 1):
        name = product.get('name', 'Sin nombre')
        price = product.get('price', product.get('regular_price', 'Consultar'))
        stock_status = product.get('stock_status', 'instock') == 'instock'
        permalink = product.get('permalink', '')
        
        info = f"""
üì¶ **{i}. {name}**
üí∞ Precio: ${price}
üìä Stock: {'‚úÖ Disponible' if stock_status else '‚ùå Sin stock'}"""
        
        if product.get('sale_price'):
            info += f"\nüî• Oferta: ${product.get('sale_price')} (antes ${product.get('regular_price')})"
            
        if permalink:
            info += f"\nüîó Ver producto: {permalink}"
        
        info += "\n"
        products_info.append(info)
    
    logger.info(f"‚úÖ {len(products_saved)} productos guardados en contexto")
    return "\n".join(products_info)

@function_tool
async def get_combos_with_context(wrapper: RunContextWrapper[RoyalAgentContext]) -> str:
    """
    Obtiene combos emprendedores Y los guarda en el contexto para referencias futuras.
    ¬°NUEVA FUNCI√ìN que soluciona el problema de memoria!
    """
    
    context = wrapper.context
    conversation = context.conversation
    
    logger.info(f"üöÄ GET_COMBOS_WITH_CONTEXT para usuario: {context.user_id}")
    
    # Buscar combos por categor√≠a (ID 91) y por t√©rmino de b√∫squeda
    combo_result = await wc_client.make_request('products', {'category': 91, 'per_page': 8})
    search_result = await wc_client.make_request('products', {'search': 'combo', 'per_page': 5})
    
    all_combos = []
    products_info = []
    
    # Verificar errores
    if 'error' in combo_result and 'error' in search_result:
        logger.error("‚ùå Error obteniendo combos de ambas fuentes")
        conversation.add_interaction("system", "Informaci√≥n faltante: product")
        conversation.update_user_profile("needs_human_assistance", True)
        conversation.current_state = "pending_human_assistance"
        
        import random
        responses = [
            "Dale, tengo que chequear los combos puntualmente. Dame un ratito y te confirmo todo üëç",
            "Los combos los tengo que verificar bien. En un momento te traigo las opciones disponibles üëç",
            "D√©jame que consulto los combos espec√≠ficamente y te paso toda la informaci√≥n üëç"
        ]
        return random.choice(responses)
    
    # Procesar combos de la categor√≠a espec√≠fica
    if isinstance(combo_result, list) and len(combo_result) > 0:
        logger.info(f"üì¶ Combos de categor√≠a encontrados: {len(combo_result)}")
        
        for product in combo_result[:5]:
            all_combos.append(product)
    
    # Procesar resultados de b√∫squeda adicionales (evitar duplicados)
    if isinstance(search_result, list) and len(search_result) > 0:
        logger.info(f"üîç Combos de b√∫squeda encontrados: {len(search_result)}")
        
        for product in search_result[:3]:
            # Evitar duplicados por ID
            if not any(combo.get('id') == product.get('id') for combo in all_combos):
                all_combos.append(product)
    
    # Limitar a m√°ximo 6 combos
    all_combos = all_combos[:6]
    
    if not all_combos:
        logger.warning("‚ùå No se encontraron combos")
        conversation.add_interaction("system", "Informaci√≥n faltante: product")
        conversation.update_user_profile("needs_human_assistance", True)
        conversation.current_state = "pending_human_assistance"
        
        import random
        responses = [
            "Dale, tengo que chequear qu√© combos tenemos disponibles. Dame un momento üëç",
            "Los combos emprendedores los tengo que verificar. Ya te confirmo las opciones üëç",
            "D√©jame que reviso qu√© combos hay disponibles y te paso la info completa üëç"
        ]
        return random.choice(responses)
    
    # üî• PARTE CR√çTICA: Guardar combos en el contexto
    logger.info(f"üíæ Guardando {len(all_combos)} combos en contexto...")
    
    for i, product in enumerate(all_combos, 1):
        name = product.get('name', 'Sin nombre')
        price = product.get('price', product.get('regular_price', 'Consultar'))
        permalink = product.get('permalink', '')
        
        # Crear referencia del producto
        product_ref = ProductReference(
            name=name,
            price=price,
            id=str(product.get('id', '')),
            permalink=permalink,
            category='combo'
        )
        
        # Guardar en contexto
        conversation.add_product_reference(product_ref)
        
        # Formatear para mostrar
        stock_status = product.get('stock_status', 'instock') == 'instock'
        
        info = f"""
{i}. üéÅ **{name}**
   üí∞ Precio: ${price}
   üìä Stock: {'‚úÖ Disponible' if stock_status else '‚ùå Sin stock'}"""
        
        if permalink:
            info += f"\n   üîó [Ver combo]({permalink})"
        
        products_info.append(info)
    
    # Actualizar estado de conversaci√≥n
    conversation.current_state = "selecting"
    conversation.add_interaction("assistant", f"Mostr√© {len(all_combos)} combos emprendedores")
    
    logger.info(f"‚úÖ {len(all_combos)} combos guardados en contexto para referencias")
    
    header = "üöÄ **COMBOS EMPRENDEDORES DISPONIBLES:**\n"
    footer = "\n**üî• ¬°Estos combos se agotan r√°pido!** La mayor√≠a de emprendedoras eligen estos porque ya est√°n probados.\n\nüí° **Pod√©s elegir ahora:** 'quiero el combo 1', 'me interesa el 3', etc.\n\n**¬øCu√°l te llama m√°s la atenci√≥n?** Te ayudo a completar tu pedido en este momento üëâ"
    
    return header + "\n".join(products_info) + footer

@function_tool
async def process_purchase_intent(
    wrapper: RunContextWrapper[RoyalAgentContext], 
    user_message: str
) -> str:
    """
    Procesa intenci√≥n de compra usando el contexto de productos mostrados.
    """
    
    context = wrapper.context
    conversation = context.conversation
    
    logger.info(f"üí≥ PROCESS_PURCHASE_INTENT para usuario: {context.user_id}")
    logger.info(f"   Mensaje: {user_message}")
    
    # Verificar si hay productos en el contexto
    if not conversation.recent_products:
        logger.info("   No hay productos en contexto")
        return "ü§î No veo que hayamos visto productos recientemente. ¬øPodr√≠as ser m√°s espec√≠fico sobre qu√© quer√©s comprar?"
    
    # Buscar producto referenciado
    referenced_product = conversation.find_product_by_reference(user_message)
    
    if referenced_product:
        # Actualizar estado de conversaci√≥n
        conversation.current_state = "purchasing"
        conversation.add_interaction("user", f"Quiere comprar: {referenced_product.name}")
        
        logger.info(f"‚úÖ Producto identificado: {referenced_product.name}")
        
        response = f"""‚úÖ **¬°Perfecto! Elegiste:**

üì¶ **{referenced_product.name}**
üí∞ **Precio: ${referenced_product.price}**

üí≥ **Para confirmar tu pedido necesito:**
1. Tu nombre completo
2. Direcci√≥n de env√≠o completa
3. M√©todo de pago preferido

üí° **Opciones de pago:**
‚Ä¢ Tarjeta (hasta 3 cuotas sin inter√©s)
‚Ä¢ Transferencia bancaria
‚Ä¢ Efectivo en locales

üéØ **Sistema de se√±a:** Pod√©s reservarlo con $10,000 y el resto lo pag√°s al retirar o antes del despacho.

¬øEmpezamos con tu nombre completo?"""
        
        return response
    
    # Si no encuentra producto espec√≠fico, mostrar opciones
    products_list = []
    for i, product in enumerate(conversation.recent_products[-5:], 1):
        products_list.append(f"{i}. {product.name} - ${product.price}")
    
    logger.info("   Producto no identificado claramente")
    
    return f"""ü§î **No estoy seguro cu√°l de estos productos quer√©s:**

{chr(10).join(products_list)}

¬øPodr√≠as decirme el **n√∫mero** o el **nombre espec√≠fico** del producto que te interesa?

Por ejemplo: "Quiero el 2" o "Me interesa el {conversation.recent_products[0].name.split()[0]}" """

@function_tool
async def update_user_profile(
    wrapper: RunContextWrapper[RoyalAgentContext], 
    profile_key: str, 
    profile_value: str
) -> str:
    """
    Actualiza el perfil del usuario en el contexto.
    """
    
    context = wrapper.context
    conversation = context.conversation
    
    logger.info(f"üë§ UPDATE_USER_PROFILE para usuario: {context.user_id}")
    logger.info(f"   {profile_key}: {profile_value}")
    
    # Actualizar perfil
    conversation.update_user_profile(profile_key, profile_value)
    
    # Casos especiales
    if profile_key == "experience_level":
        conversation.is_entrepreneur = True
        conversation.experience_level = profile_value
        logger.info(f"   Usuario marcado como emprendedor: {profile_value}")
        
    elif profile_key == "interests":
        if profile_value not in conversation.product_interests:
            conversation.product_interests.append(profile_value)
        logger.info(f"   Inter√©s agregado: {profile_value}")
        
    elif profile_key == "budget_range":
        conversation.budget_range = profile_value
        logger.info(f"   Presupuesto actualizado: {profile_value}")
    
    # Registrar en historial
    conversation.add_interaction("assistant", f"Perfil actualizado: {profile_key} = {profile_value}")
    
    return f"‚úÖ Perfil actualizado: {profile_key} = {profile_value}"

@function_tool
async def get_recommendations_with_context(
    wrapper: RunContextWrapper[RoyalAgentContext], 
    recommendation_type: str = "general"
) -> str:
    """
    Obtiene recomendaciones personalizadas basadas en el contexto del usuario.
    """
    
    context = wrapper.context
    conversation = context.conversation
    
    logger.info(f"üí° GET_RECOMMENDATIONS_WITH_CONTEXT para usuario: {context.user_id}")
    logger.info(f"   Tipo: {recommendation_type}")
    
    recommendations = []
    
    # Recomendaciones para emprendedores
    if conversation.is_entrepreneur:
        if conversation.experience_level == "empezando":
            recommendations.append("üöÄ **Para empezar:** Te recomiendo combos de bijou o maquillaje (menor inversi√≥n)")
            recommendations.append("üìà **Estrategia:** Comenz√° con productos de alta rotaci√≥n")
            
        elif conversation.experience_level == "experimentado":
            recommendations.append("üíé **Para expandir:** Combos de joyas de plata tienen mejor margen")
            recommendations.append("üéØ **Tip:** Diversific√° con relojes o indumentaria")
    
    # Recomendaciones basadas en intereses
    if conversation.product_interests:
        interests = conversation.product_interests[-3:]  # √öltimos 3 intereses
        recommendations.append(f"üí° **Basado en tus intereses ({', '.join(interests)}):**")
        
        if 'joyas' in interests:
            recommendations.append("  ‚Ä¢ Joyas de plata 925 tienen excelente margen")
        if 'relojes' in interests:
            recommendations.append("  ‚Ä¢ Relojes Casio son muy pedidos")
        if 'maquillaje' in interests:
            recommendations.append("  ‚Ä¢ Maquillaje tiene alta rotaci√≥n")
    
    # Recomendaciones basadas en presupuesto
    if conversation.budget_range:
        recommendations.append(f"üí∞ **Para tu presupuesto ({conversation.budget_range}):**")
        
        if "40000" in conversation.budget_range or "b√°sico" in conversation.budget_range.lower():
            recommendations.append("  ‚Ä¢ Combo Emprendedor B√°sico - ideal para comenzar")
        elif "80000" in conversation.budget_range or "intermedio" in conversation.budget_range.lower():
            recommendations.append("  ‚Ä¢ Combo Mixto - mejor variedad y margen")
    
    # Recomendaciones basadas en productos vistos
    if conversation.recent_products:
        categories_seen = list(set([p.category for p in conversation.recent_products if p.category]))
        if categories_seen:
            recommendations.append(f"üì¶ **Productos relacionados a lo que viste:**")
            for category in categories_seen[:2]:
                recommendations.append(f"  ‚Ä¢ M√°s productos de {category}")
    
    # Recomendaci√≥n general si no hay contexto espec√≠fico
    if not recommendations:
        recommendations.append("üí° **Recomendaci√≥n general:**")
        recommendations.append("  ‚Ä¢ Comenz√° con combos emprendedores para mejor variedad")
        recommendations.append("  ‚Ä¢ Joyas y maquillaje tienen alta demanda")
        recommendations.append("  ‚Ä¢ Preguntame sobre tu experiencia para mejores recomendaciones")
    
    logger.info(f"‚úÖ {len(recommendations)} recomendaciones generadas")
    return "\n".join(recommendations)

@function_tool
async def clear_conversation_context(wrapper: RunContextWrapper[RoyalAgentContext]) -> str:
    """
    Limpia el contexto de la conversaci√≥n (nueva conversaci√≥n).
    """
    
    context = wrapper.context
    user_id = context.user_id
    
    logger.info(f"üßπ CLEAR_CONVERSATION_CONTEXT para usuario: {user_id}")
    
    # Reiniciar conversaci√≥n manteniendo el user_id
    from .conversation_context import ConversationMemory
    context.conversation = ConversationMemory(user_id=user_id)
    
    logger.info("‚úÖ Contexto de conversaci√≥n limpiado")
    return "‚úÖ Contexto de conversaci√≥n reiniciado. ¬°Empezamos de nuevo!"

@function_tool
async def handle_conversation_continuity(wrapper: RunContextWrapper[RoyalAgentContext], user_message: str) -> str:
    """
    HERRAMIENTA CR√çTICA: Maneja la continuidad conversacional cuando el usuario responde
    a una pregunta espec√≠fica del bot. Evita que se pierda el hilo de la conversaci√≥n.
    """
    
    context = wrapper.context
    conversation = context.conversation
    user_id = context.user_id
    
    logger.info(f"üîÑ HANDLE_CONVERSATION_CONTINUITY para usuario: {user_id}")
    logger.info(f"   Mensaje: {user_message}")
    logger.info(f"   Esperando respuesta: {conversation.awaiting_response}")
    logger.info(f"   Acci√≥n pendiente: {conversation.pending_action}")
    
    # Verificar si es una continuaci√≥n
    if not conversation.awaiting_response:
        return "No hay contexto de continuaci√≥n activo."
    
    # Detectar tipo de respuesta
    message_lower = user_message.lower().strip()
    is_confirmation = any(word in message_lower for word in ["si", "s√≠", "ok", "okay", "dale", "perfecto", "bueno", "genial", "yes", "claro"])
    is_negative = any(word in message_lower for word in ["no", "nah", "nope", "despu√©s", "luego", "otro momento"])
    
    # Registrar la respuesta
    conversation.add_interaction("user", user_message, {"is_continuation": True, "pending_action": conversation.pending_action})
    
    response = ""
    
    # Manejar seg√∫n la acci√≥n pendiente
    if conversation.pending_action == "recommendations":
        if is_confirmation:
            response = """Perfecto! Para armarte la recomendaci√≥n ideal, necesito conocerte un poquito m√°s:

‚Ä¢ ¬øYa ten√©s experiencia vendiendo o ser√≠a tu primer emprendimiento?
‚Ä¢ ¬øQu√© tipo de productos te llaman m√°s la atenci√≥n?
‚Ä¢ ¬øTu idea es arrancar de a poco o hacer una inversi√≥n m√°s grande?

Con esa info te armo un combo personalizado que sea perfecto para tu situaci√≥n üíé"""
            
            # Actualizar estado
            conversation.set_awaiting_response("personal_questions", "informaci√≥n sobre experiencia y preferencias", {
                "step": "collecting_profile",
                "questions_asked": ["experience", "preferences", "budget"]
            })
            
        elif is_negative:
            response = """Dale, sin problema! Quedamos ac√° por si cambi√°s de opini√≥n.

¬øTe interesa que te muestre alg√∫n producto espec√≠fico o ten√©s alguna consulta sobre Royal? üòä"""
            conversation.clear_awaiting_response()
        else:
            response = f"""Perfecto! Entiendo que quer√©s {user_message}.

Para darte la mejor recomendaci√≥n personalizada, contame:
‚Ä¢ ¬øTen√©s experiencia vendiendo o ser√≠a tu primera vez?
‚Ä¢ ¬øQu√© productos te gustan m√°s?

As√≠ te armo algo ideal para vos üíé"""
            
            conversation.set_awaiting_response("personal_questions", "informaci√≥n sobre experiencia y preferencias")
    
    elif conversation.pending_action == "personal_questions":
        response = f"""Genial, {user_message}! Con esa info ya tengo una mejor idea.

Bas√°ndome en lo que me contaste, te recomiendo arrancar con:

üéØ **COMBO PERSONALIZADO SUGERIDO:**
‚Ä¢ Joyas de plata 925 (siempre tienen demanda)
‚Ä¢ Algunos productos de maquillaje (alta rotaci√≥n)  
‚Ä¢ Mix de accesorios para completar

¬øTe parece que vayamos por ah√≠ o prefer√≠s enfocarte en una sola categor√≠a primero? üíé"""
        
        conversation.clear_awaiting_response()
        conversation.is_entrepreneur = True
        conversation.update_user_profile("experience_feedback", user_message)
    
    else:
        # Acci√≥n no reconocida, respuesta gen√©rica
        response = f"""Gracias por tu respuesta: "{user_message}".

¬øEn qu√© m√°s te puedo ayudar? üòä"""
        conversation.clear_awaiting_response()
    
    # Registrar respuesta del bot
    conversation.add_interaction("assistant", response[:100] + "..." if len(response) > 100 else response, {
        "continuity_handled": True,
        "original_action": conversation.pending_action
    })
    
    logger.info(f"‚úÖ Continuidad manejada exitosamente")
    return response

@function_tool
async def set_awaiting_user_response(wrapper: RunContextWrapper[RoyalAgentContext], pending_action: str, question_asked: str) -> str:
    """
    Marca que el bot acaba de hacer una pregunta y est√° esperando respuesta espec√≠fica del usuario.
    Usado para mantener continuidad conversacional.
    """
    
    context = wrapper.context
    conversation = context.conversation
    
    logger.info(f"‚è≥ SET_AWAITING_USER_RESPONSE: {pending_action}")
    logger.info(f"   Pregunta: {question_asked}")
    
    conversation.set_awaiting_response(pending_action, question_asked)
    
    return f"‚úÖ Marcado como esperando respuesta para: {pending_action}"

@function_tool
async def search_categories_by_query(
    wrapper: RunContextWrapper[RoyalAgentContext], 
    user_query: str
) -> str:
    """
    Busca categor√≠as de productos relevantes en el cat√°logo completo y devuelve URLs directas.
    √ötil cuando el usuario pregunta sobre disponibilidad de tipos de productos.
    
    Args:
        user_query: Consulta del usuario (ej: "tienen lentes de sol", "anillos de plata")
    """
    
    context = wrapper.context
    conversation = context.conversation
    user_id = context.user_id
    
    logger.info(f"üîç SEARCH_CATEGORIES_BY_QUERY para usuario: {user_id}")
    logger.info(f"   Query: {user_query}")
    
    try:
        # Buscar categor√≠as relevantes
        matches = find_categories(user_query, max_results=6)
        
        if not matches:
            # Si no encuentra categor√≠as espec√≠ficas, activar HITL para consulta personalizada
            conversation.add_interaction("system", "Informaci√≥n faltante: category_search")
            conversation.update_user_profile("needs_human_assistance", True)
            conversation.current_state = "pending_human_assistance"
            
            import random
            fallback_responses = [
                f"Dale, dejame que chequeo puntualmente si tenemos {user_query} y te confirmo con toda la info üëç",
                f"Tengo que verificar espec√≠ficamente sobre {user_query}. Dame un momento que te traigo las opciones disponibles üëç",
                f"D√©jame que reviso {user_query} en detalle y te paso la informaci√≥n completa üëç"
            ]
            return random.choice(fallback_responses)
        
        # Registrar categor√≠as encontradas en el contexto
        conversation.add_interaction("assistant", f"Mostr√© {len(matches)} categor√≠as relacionadas con: {user_query}")
        
        # Guardar categor√≠as en el contexto como productos de referencia
        for match in matches[:3]:  # M√°ximo 3 para no sobrecargar contexto
            category_ref = ProductReference(
                name=match.category.name,
                price="Ver productos", 
                id="",
                permalink=match.category.url,
                category="category_link"
            )
            conversation.add_product_reference(category_ref)
        
        # Actualizar estado de conversaci√≥n
        conversation.current_state = "browsing_categories"
        conversation.add_interaction("assistant", f"Mostr√© categor√≠as para: {user_query}")
        
        # Formatear respuesta usando la funci√≥n del category_matcher
        formatted_response = format_categories_for_user(matches, max_display=5)
        
        # Agregar contexto personalizado argentino
        if len(matches) > 1:
            formatted_response += f"\n\nüí° **Tip:** Pod√©s explorar cualquiera de estos links y si te gusta algo espec√≠fico, decime cu√°l te interesa y te ayudo con m√°s detalles."
        else:
            formatted_response += f"\n\nüí° **¬°Dale!** Explor√° el link y si ves algo que te gusta, decime y te doy m√°s info espec√≠fica."
        
        logger.info(f"‚úÖ {len(matches)} categor√≠as encontradas para '{user_query}'")
        return formatted_response
        
    except Exception as e:
        logger.error(f"‚ùå Error buscando categor√≠as: {e}")
        
        # Fallback a HITL en caso de error
        conversation.add_interaction("system", "Error t√©cnico: category_search")
        conversation.update_user_profile("needs_human_assistance", True)
        conversation.current_state = "pending_human_assistance"
        
        import random
        error_responses = [
            "Uy, se me complic√≥ el sistema de b√∫squeda. Dame un momento que lo soluciono y te ayudo üëç",
            "Tengo un problemita t√©cnico buscando categor√≠as. Ya lo arreglo y te traigo toda la info üëç"
        ]
        return random.choice(error_responses)

@function_tool
async def analyze_user_message_and_update_profile(wrapper: RunContextWrapper[RoyalAgentContext], user_message: str) -> str:
    """
    HERRAMIENTA CR√çTICA: Analiza autom√°ticamente el mensaje del usuario para extraer 
    informaci√≥n del perfil y evitar preguntas redundantes.
    """
    
    context = wrapper.context
    conversation = context.conversation
    user_id = context.user_id
    
    logger.info(f"üß† ANALYZE_USER_MESSAGE para usuario: {user_id}")
    logger.info(f"   Mensaje: {user_message}")
    
    message_lower = user_message.lower()
    profile_updates = []
    
    # 1. DETECCI√ìN DE NIVEL DE EXPERIENCIA
    beginner_patterns = [
        "todav√≠a no vend√≠", "todavia no vendi", "nunca vend√≠", "nunca vendi", 
        "no vend√≠ nada", "no vendi nada", "primera vez", "primer emprendimiento",
        "empezar", "comenzar", "arrancar", "no tengo experiencia", 
        "soy nuevo", "soy nueva", "reci√©n empiezo", "recien empiezo"
    ]
    
    experienced_patterns = [
        "ya vend√≠", "ya vendi", "tengo experiencia", "vengo vendiendo", 
        "hace tiempo que vendo", "soy revendedor", "soy revendedora",
        "mi negocio", "mis clientes", "mis ventas", "renovar stock"
    ]
    
    restocking_patterns = [
        "renovar stock", "reponer stock", "necesito m√°s", "se me acab√≥",
        "se me acabo", "quiero m√°s productos", "restock"
    ]
    
    if any(pattern in message_lower for pattern in beginner_patterns):
        if not conversation.experience_level:  # Solo actualizar si no est√° definido
            conversation.update_user_profile("experience_level", "empezando")
            conversation.is_entrepreneur = True
            profile_updates.append("Experiencia: principiante/empezando")
            logger.info(f"üìä Detectado: usuario principiante")
    
    elif any(pattern in message_lower for pattern in experienced_patterns):
        if not conversation.experience_level:
            conversation.update_user_profile("experience_level", "experimentado") 
            conversation.is_entrepreneur = True
            profile_updates.append("Experiencia: experimentado")
            logger.info(f"üìä Detectado: usuario experimentado")
    
    elif any(pattern in message_lower for pattern in restocking_patterns):
        if not conversation.experience_level:
            conversation.update_user_profile("experience_level", "renovando_stock")
            conversation.is_entrepreneur = True
            profile_updates.append("Experiencia: renovando stock")
            logger.info(f"üìä Detectado: usuario renovando stock")
    
    # 2. DETECCI√ìN DE INTERESES DE PRODUCTO
    product_interests = []
    
    if any(word in message_lower for word in ["joya", "joyas", "anillo", "collar", "pulsera", "aros"]):
        product_interests.append("joyas")
    if any(word in message_lower for word in ["maquillaje", "makeup", "labial", "sombra", "base"]):
        product_interests.append("maquillaje") 
    if any(word in message_lower for word in ["ropa", "indumentaria", "remera", "vestido", "pantal√≥n"]):
        product_interests.append("indumentaria")
    if any(word in message_lower for word in ["bijou", "bijouterie", "accesorios"]):
        product_interests.append("bijouterie")
    if any(word in message_lower for word in ["reloj", "relojes"]):
        product_interests.append("relojes")
    
    for interest in product_interests:
        if interest not in conversation.product_interests:
            conversation.product_interests.append(interest)
            profile_updates.append(f"Inter√©s detectado: {interest}")
            logger.info(f"üìä Detectado inter√©s: {interest}")
    
    # 3. DETECCI√ìN DE PRESUPUESTO
    budget_patterns = [
        (r"(\d+)k", "aproximadamente {} mil pesos"),
        (r"\$(\d+\.?\d*)", "${} pesos"),
        (r"(\d+)\s*mil", "{} mil pesos"),
        (r"poco.*dinero", "presupuesto ajustado"),
        (r"mucha.*plata", "presupuesto amplio"),
    ]
    
    import re
    for pattern, description in budget_patterns:
        match = re.search(pattern, message_lower)
        if match and not conversation.budget_range:
            if match.groups():
                budget_info = description.format(match.group(1))
            else:
                budget_info = description
            conversation.budget_range = budget_info
            profile_updates.append(f"Presupuesto: {budget_info}")
            logger.info(f"üìä Detectado presupuesto: {budget_info}")
            break
    
    # 4. DETECCI√ìN DE INTENCI√ìN
    if any(word in message_lower for word in ["emprender", "emprendimiento", "negocio", "revender"]):
        if not conversation.user_intent:
            conversation.user_intent = "emprendedor"
            conversation.is_entrepreneur = True
            profile_updates.append("Intenci√≥n: emprendedor")
            logger.info(f"üìä Detectado: intenci√≥n emprendedora")
    
    # Registrar actualizaciones en el historial
    if profile_updates:
        conversation.add_interaction("system", f"Perfil actualizado autom√°ticamente: {', '.join(profile_updates)}", {
            "auto_analysis": True,
            "updates": profile_updates
        })
        
        result = f"‚úÖ Perfil actualizado autom√°ticamente:\n" + "\n".join(f"‚Ä¢ {update}" for update in profile_updates)
        logger.info(f"‚úÖ {len(profile_updates)} actualizaciones de perfil realizadas")
        return result
    else:
        return "‚úÖ Mensaje analizado, no se detectaron actualizaciones de perfil necesarias"

@function_tool
async def should_ask_about_experience(wrapper: RunContextWrapper[RoyalAgentContext]) -> str:
    """
    Valida si es necesario preguntar sobre experiencia del usuario o si ya se conoce.
    CR√çTICO: Evita preguntas redundantes.
    """
    
    context = wrapper.context
    conversation = context.conversation
    
    logger.info(f"ü§î SHOULD_ASK_ABOUT_EXPERIENCE para usuario: {context.user_id}")
    logger.info(f"   Experience level actual: {conversation.experience_level}")
    logger.info(f"   Is entrepreneur: {conversation.is_entrepreneur}")
    
    # Si ya tenemos el nivel de experiencia, NO preguntar
    if conversation.experience_level:
        response = f"‚ùå NO PREGUNTAR - Ya conocemos la experiencia del usuario: {conversation.experience_level}"
        logger.info(response)
        return response
    
    # Revisar historial de interacciones por pistas
    beginner_hints = [
        "todav√≠a no vend√≠", "todavia no vendi", "nunca vend√≠", "primera vez",
        "empezar", "comenzar", "arrancar", "soy nuevo", "soy nueva"
    ]
    
    experienced_hints = [
        "ya vend√≠", "tengo experiencia", "vengo vendiendo", "mi negocio", 
        "mis clientes", "renovar stock"
    ]
    
    recent_messages = conversation.interaction_history[-3:]  # √öltimos 3 mensajes
    all_text = " ".join([msg["message"].lower() for msg in recent_messages if msg["role"] == "user"])
    
    if any(hint in all_text for hint in beginner_hints):
        # Actualizar autom√°ticamente y no preguntar
        conversation.update_user_profile("experience_level", "empezando")
        conversation.is_entrepreneur = True
        response = "‚ùå NO PREGUNTAR - Detectado autom√°ticamente: principiante (basado en mensajes recientes)"
        logger.info(response)
        return response
    
    if any(hint in all_text for hint in experienced_hints):
        conversation.update_user_profile("experience_level", "experimentado")
        conversation.is_entrepreneur = True
        response = "‚ùå NO PREGUNTAR - Detectado autom√°ticamente: experimentado (basado en mensajes recientes)"
        logger.info(response)
        return response
    
    # Si no tenemos informaci√≥n, S√ç es v√°lido preguntar
    response = "‚úÖ S√ç PREGUNTAR - No tenemos informaci√≥n sobre experiencia del usuario"
    logger.info(response)
    return response

def create_contextual_tools():
    """Crea todas las herramientas contextuales"""
    
    tools = [
        # HITL HABILITADO
        detect_user_frustration,
        handle_missing_information_hitl,
        check_mcp_connectivity_and_fallback,
        escalate_to_human_support,
        
        # Herramientas contextuales principales
        get_context_summary,
        get_product_info_with_context,
        get_combos_with_context,
        process_purchase_intent,
        update_user_profile,
        get_recommendations_with_context,
        clear_conversation_context,
        handle_conversation_continuity,
        set_awaiting_user_response,
        analyze_user_message_and_update_profile,
        should_ask_about_experience,
        
        # B√∫squeda de categor√≠as
        search_categories_by_query
    ]
    
    logger.info(f"‚úÖ Contextual Tools creadas: {len(tools)} herramientas disponibles (HITL + Categor√≠as habilitado)")
    return tools 