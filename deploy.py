#!/usr/bin/env python3
"""
üöÄ SCRIPT DE DEPLOY AUTOMATIZADO
Bot Royal Testing Interface - Deploy a diferentes plataformas
"""

import os
import subprocess
import sys
from pathlib import Path

def check_prerequisites():
    """Verifica que todo est√© listo para deploy"""
    
    print("üîç Verificando prerequisitos...")
    
    # Verificar que bot_testing_app.py existe
    if not Path("bot_testing_app.py").exists():
        print("‚ùå bot_testing_app.py no encontrado")
        return False
    
    # Verificar requirements.txt
    if not Path("requirements.txt").exists():
        print("‚ùå requirements.txt no encontrado")
        return False
    
    # Verificar variables de entorno cr√≠ticas
    required_vars = ['OPENAI_API_KEY']
    missing = [var for var in required_vars if not os.getenv(var)]
    
    if missing:
        print(f"‚ö†Ô∏è Variables de entorno faltantes: {missing}")
        print("   Configurar antes del deploy")
    
    print("‚úÖ Prerequisitos verificados")
    return True

def deploy_to_railway():
    """Deploy a Railway"""
    
    print("üöÇ Deploying a Railway...")
    
    # Verificar si Railway CLI est√° instalado
    try:
        subprocess.run(["railway", "--version"], check=True, capture_output=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå Railway CLI no instalado")
        print("   Instalar desde: https://railway.app/cli")
        return False
    
    try:
        # Login si es necesario
        subprocess.run(["railway", "login"], check=True)
        
        # Deploy
        subprocess.run(["railway", "up"], check=True)
        
        print("‚úÖ Deploy a Railway completado")
        print("üîó URL: railway logs para ver la URL generada")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error en deploy a Railway: {e}")
        return False

def deploy_to_streamlit_cloud():
    """Instrucciones para deploy a Streamlit Cloud"""
    
    print("‚òÅÔ∏è Deploy a Streamlit Cloud (Manual):")
    print()
    print("1Ô∏è‚É£ Subir c√≥digo a GitHub:")
    print("   git add .")
    print("   git commit -m 'Deploy bot testing interface'")
    print("   git push origin main")
    print()
    print("2Ô∏è‚É£ Ir a https://share.streamlit.io")
    print("3Ô∏è‚É£ Conectar repositorio GitHub")
    print("4Ô∏è‚É£ Configurar:")
    print("   - Main file: bot_testing_app.py")
    print("   - Python version: 3.11")
    print()
    print("5Ô∏è‚É£ Agregar secrets (variables de entorno):")
    print("   - OPENAI_API_KEY")
    print("   - WOOCOMMERCE_URL")
    print("   - WOOCOMMERCE_CONSUMER_KEY") 
    print("   - WOOCOMMERCE_CONSUMER_SECRET")
    print()
    print("6Ô∏è‚É£ Deploy autom√°tico en unos minutos")

def create_production_env_example():
    """Crea ejemplo de variables de entorno para producci√≥n"""
    
    env_content = """# üöÄ VARIABLES DE ENTORNO PARA PRODUCCI√ìN
# Copiar y completar en la plataforma de deploy

# OpenAI
OPENAI_API_KEY=sk-...

# WooCommerce
WOOCOMMERCE_URL=https://royalmayorista.com.ar
WOOCOMMERCE_CONSUMER_KEY=ck_...
WOOCOMMERCE_CONSUMER_SECRET=cs_...

# Configuraci√≥n
ENVIRONMENT=production
PORT=8501
HOST=0.0.0.0

# Opcional: Configuraciones adicionales
STREAMLIT_SERVER_PORT=8501
STREAMLIT_SERVER_HEADLESS=true
STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
"""
    
    with open("production.env.example", "w") as f:
        f.write(env_content)
    
    print("üìù Creado: production.env.example")
    print("   Usar como referencia para configurar variables en producci√≥n")

def prepare_for_deploy():
    """Prepara archivos para deploy"""
    
    print("üì¶ Preparando archivos para deploy...")
    
    # Crear archivo de configuraci√≥n de producci√≥n
    create_production_env_example()
    
    # Verificar que .gitignore excluye archivos sensibles
    gitignore_content = """
# Environments
.env
.env.local
.env.production
config.env
*.env

# Database
*.db
*.sqlite3

# Python
__pycache__/
*.pyc
*.pyo
*.pyd
.Python
env/
.venv/
venv/

# IDEs
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Logs
*.log
logs/
"""
    
    with open(".gitignore", "w") as f:
        f.write(gitignore_content.strip())
    
    print("‚úÖ Archivos preparados")

def main():
    """Funci√≥n principal"""
    
    print("üöÄ BOT ROYAL - DEPLOY AUTOMATIZADO")
    print("=" * 40)
    
    if not check_prerequisites():
        sys.exit(1)
    
    print("\nüìã Opciones de Deploy:")
    print("1Ô∏è‚É£ Railway (Autom√°tico)")
    print("2Ô∏è‚É£ Streamlit Cloud (Manual)")
    print("3Ô∏è‚É£ Preparar archivos solamente")
    print("0Ô∏è‚É£ Salir")
    
    while True:
        choice = input("\nüéØ Selecciona opci√≥n (1-3, 0 para salir): ").strip()
        
        if choice == "0":
            print("üëã ¬°Hasta luego!")
            break
            
        elif choice == "1":
            prepare_for_deploy()
            deploy_to_railway()
            break
            
        elif choice == "2":
            prepare_for_deploy()
            deploy_to_streamlit_cloud()
            break
            
        elif choice == "3":
            prepare_for_deploy()
            print("‚úÖ Archivos preparados para deploy manual")
            break
            
        else:
            print("‚ùå Opci√≥n inv√°lida. Intenta de nuevo.")

if __name__ == "__main__":
    main() 